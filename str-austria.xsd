<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="reportdata">
    <xs:complexType>
      <xs:choice>
        <xs:element name="transactions">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="transaction" type="transactionType" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:sequence maxOccurs="unbounded">
          <xs:element name="transaction" type="transactionType" />
        </xs:sequence>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="transactionType">
    <xs:sequence>
      <xs:element name="transactionnumber">
        <xs:simpleType>
          <xs:annotation>
            <xs:documentation>The transaction number length was extended to 100 chars</xs:documentation>
          </xs:annotation>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
            <xs:minLength value="1" />
            <xs:pattern value="[^']*" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="transaction_is_suspicious" type="xs:boolean" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element minOccurs="0" name="internal_ref_number">
        <xs:simpleType>
          <xs:annotation>
            <xs:documentation>The internal ref number length was extended to 100 chars</xs:documentation>
          </xs:annotation>
          <xs:restriction base="xs:string">
            <xs:minLength value="1" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="agent_name" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="transaction_location">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="transaction_address" type="t_address" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element minOccurs="0" name="transaction_description" type="comments_type" />
      <xs:element name="date_transaction" type="sql_date" />
      <xs:element minOccurs="0" name="teller">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="50" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="authorized">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="50" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:sequence minOccurs="0">
        <xs:element name="late_deposit" type="xs:boolean" minOccurs="0" />
        <xs:element minOccurs="0" name="date_posting" type="sql_date" />
      </xs:sequence>
      <xs:element minOccurs="0" name="value_date" type="sql_date" />
      <xs:element name="transaction_type_code" type="transaction_type" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element name="transmode_code" type="conduction_type" />
      <xs:element minOccurs="0" maxOccurs="0" name="transmode_comment">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="50" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="amount_local" type="sql_decimal" />
      <xs:element name="transaction_status" type="transaction_status_type" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:choice>
        <xs:element name="involved_parties">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="party" type="t_party" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:sequence>
          <xs:choice>
            <xs:element name="t_from_my_client">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="from_funds_code" type="funds_type" />
                  <xs:element minOccurs="0" name="from_funds_comment">
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:maxLength value="255" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:element>
                  <xs:element name="from_transaction_additional_info" type="transaction_additional_info_type" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
                  <xs:element minOccurs="0" name="from_foreign_currency" type="t_foreign_currency" />
                  <xs:sequence minOccurs="0">
                    <xs:element name="conductor_is_suspected" type="xs:boolean" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
                    <xs:element name="t_conductor" type="t_conductor_my_client" minOccurs="0" />
                  </xs:sequence>
                  <xs:sequence>
                    <xs:element name="from_is_suspected" type="xs:boolean" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
                    <xs:choice>
                      <xs:element name="from_account" type="t_account_my_client" />
                      <xs:element name="from_person" type="t_person_my_client" />
                      <xs:element name="from_entity" type="t_entity_my_client" />
                    </xs:choice>
                  </xs:sequence>
                  <xs:element name="from_country" type="country_type" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="t_from">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="from_funds_code" type="funds_type" />
                  <xs:element minOccurs="0" name="from_funds_comment">
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:maxLength value="255" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:element>
                  <xs:element name="from_transaction_additional_info" type="transaction_additional_info_type" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
                  <xs:element minOccurs="0" name="from_foreign_currency" type="t_foreign_currency" />
                  <xs:sequence minOccurs="0">
                    <xs:element name="conductor_is_suspected" type="xs:boolean" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
                    <xs:element name="t_conductor" type="t_conductor" minOccurs="0" />
                  </xs:sequence>
                  <xs:sequence>
                    <xs:element name="from_is_suspected" type="xs:boolean" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
                    <xs:choice>
                      <xs:element name="from_account" type="t_account" />
                      <xs:element name="from_person" type="t_person" />
                      <xs:element name="from_entity" type="t_entity" />
                    </xs:choice>
                  </xs:sequence>
                  <xs:element name="from_country" type="country_type" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:choice>
          <xs:choice>
            <xs:element name="t_to_my_client">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="to_funds_code" type="funds_type" />
                  <xs:element minOccurs="0" name="to_funds_comment">
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:maxLength value="255" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:element>
                  <xs:element name="to_transaction_additional_info" type="transaction_additional_info_type" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
                  <xs:element minOccurs="0" name="to_foreign_currency" type="t_foreign_currency" />
                  <xs:sequence>
                    <xs:element name="to_is_suspected" type="xs:boolean" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
                    <xs:choice>
                      <xs:element name="to_account" type="t_account_my_client" />
                      <xs:element name="to_person" type="t_person_my_client" />
                      <xs:element name="to_entity" type="t_entity_my_client" />
                    </xs:choice>
                  </xs:sequence>
                  <xs:element name="to_country" type="country_type" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="t_to">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="to_funds_code" type="funds_type" />
                  <xs:element minOccurs="0" name="to_funds_comment">
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:maxLength value="255" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:element>
                  <xs:element name="to_transaction_additional_info" type="transaction_additional_info_type" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
                  <xs:element minOccurs="0" name="to_foreign_currency" type="t_foreign_currency" />
                  <xs:sequence>
                    <xs:element name="to_is_suspected" type="xs:boolean" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
                    <xs:choice>
                      <xs:element name="to_account" type="t_account" />
                      <xs:element name="to_person" type="t_person" />
                      <xs:element name="to_entity" type="t_entity" />
                    </xs:choice>
                  </xs:sequence>
                  <xs:element name="to_country" type="country_type" />
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:choice>
        </xs:sequence>
      </xs:choice>
      <xs:element minOccurs="0" name="goods_services" maxOccurs="0">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="item" type="t_trans_item" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="means_of_transport" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="routing" type="route_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="comments" type="comments_type" />
    </xs:sequence>
    <xs:assert test="if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'AT') then starts-with(t_from_my_client/from_account/iban, 'AT') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'AD') then starts-with(t_from_my_client/from_account/iban, 'AD') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'AE') then starts-with(t_from_my_client/from_account/iban, 'AE')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'AL') then starts-with(t_from_my_client/from_account/iban, 'AL')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'AZ') then starts-with(t_from_my_client/from_account/iban, 'AZ')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'BA') then starts-with(t_from_my_client/from_account/iban, 'BA')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'BE') then starts-with(t_from_my_client/from_account/iban, 'BE')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'BG') then starts-with(t_from_my_client/from_account/iban, 'BG')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'BH') then starts-with(t_from_my_client/from_account/iban, 'BH')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'BI') then starts-with(t_from_my_client/from_account/iban, 'BI')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'BR') then starts-with(t_from_my_client/from_account/iban, 'BR')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'BY') then starts-with(t_from_my_client/from_account/iban, 'BY')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'CH') then starts-with(t_from_my_client/from_account/iban, 'CH')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'CR') then starts-with(t_from_my_client/from_account/iban, 'CR')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'CY') then starts-with(t_from_my_client/from_account/iban, 'CY')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'CZ') then starts-with(t_from_my_client/from_account/iban, 'CZ')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'DE') then starts-with(t_from_my_client/from_account/iban, 'DE')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'DJ') then starts-with(t_from_my_client/from_account/iban, 'DJ')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'DK') then starts-with(t_from_my_client/from_account/iban, 'DK')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'DO') then starts-with(t_from_my_client/from_account/iban, 'DO')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'EE') then starts-with(t_from_my_client/from_account/iban, 'EE')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'EG') then starts-with(t_from_my_client/from_account/iban, 'EG')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'ES') then starts-with(t_from_my_client/from_account/iban, 'ES')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'FI') then starts-with(t_from_my_client/from_account/iban, 'FI')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'FO') then starts-with(t_from_my_client/from_account/iban, 'FO')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'FR') then starts-with(t_from_my_client/from_account/iban, 'FR')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'GB') then starts-with(t_from_my_client/from_account/iban, 'GB')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'GE') then starts-with(t_from_my_client/from_account/iban, 'GE')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'GI') then starts-with(t_from_my_client/from_account/iban, 'GI')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'GL') then starts-with(t_from_my_client/from_account/iban, 'GL')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'GR') then starts-with(t_from_my_client/from_account/iban, 'GR')    else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'GT') then starts-with(t_from_my_client/from_account/iban, 'GT') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'HR') then starts-with(t_from_my_client/from_account/iban, 'HR') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'HU') then starts-with(t_from_my_client/from_account/iban, 'HU') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'IE') then starts-with(t_from_my_client/from_account/iban, 'IE') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'IL') then starts-with(t_from_my_client/from_account/iban, 'IL') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'IQ') then starts-with(t_from_my_client/from_account/iban, 'IQ') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'IS') then starts-with(t_from_my_client/from_account/iban, 'IS') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'IT') then starts-with(t_from_my_client/from_account/iban, 'IT') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'JO') then starts-with(t_from_my_client/from_account/iban, 'JO') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'KW') then starts-with(t_from_my_client/from_account/iban, 'KW') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'KZ') then starts-with(t_from_my_client/from_account/iban, 'KZ') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'LB') then starts-with(t_from_my_client/from_account/iban, 'LB') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'LC') then starts-with(t_from_my_client/from_account/iban, 'LC') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'LI') then starts-with(t_from_my_client/from_account/iban, 'LI') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'LT') then starts-with(t_from_my_client/from_account/iban, 'LT') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'LU') then starts-with(t_from_my_client/from_account/iban, 'LU') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'LV') then starts-with(t_from_my_client/from_account/iban, 'LV') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'LY') then starts-with(t_from_my_client/from_account/iban, 'LY') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'MC') then starts-with(t_from_my_client/from_account/iban, 'MC') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'MD') then starts-with(t_from_my_client/from_account/iban, 'MD') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'ME') then starts-with(t_from_my_client/from_account/iban, 'ME') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'MK') then starts-with(t_from_my_client/from_account/iban, 'MK') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'MR') then starts-with(t_from_my_client/from_account/iban, 'MR') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'MT') then starts-with(t_from_my_client/from_account/iban, 'MT') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'MU') then starts-with(t_from_my_client/from_account/iban, 'MU') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'NL') then starts-with(t_from_my_client/from_account/iban, 'NL') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'NO') then starts-with(t_from_my_client/from_account/iban, 'NO') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'PK') then starts-with(t_from_my_client/from_account/iban, 'PK') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'PL') then starts-with(t_from_my_client/from_account/iban, 'PL') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'PS') then starts-with(t_from_my_client/from_account/iban, 'PS') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'PT') then starts-with(t_from_my_client/from_account/iban, 'PT') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'QA') then starts-with(t_from_my_client/from_account/iban, 'QA') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'RO') then starts-with(t_from_my_client/from_account/iban, 'RO') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'RS') then starts-with(t_from_my_client/from_account/iban, 'RS') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'RU') then starts-with(t_from_my_client/from_account/iban, 'RU') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'SA') then starts-with(t_from_my_client/from_account/iban, 'SA') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'SC') then starts-with(t_from_my_client/from_account/iban, 'SC') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'SD') then starts-with(t_from_my_client/from_account/iban, 'SD') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'SE') then starts-with(t_from_my_client/from_account/iban, 'SE') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'SI') then starts-with(t_from_my_client/from_account/iban, 'SI') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'SK') then starts-with(t_from_my_client/from_account/iban, 'SK') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'SM') then starts-with(t_from_my_client/from_account/iban, 'SM') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'SO') then starts-with(t_from_my_client/from_account/iban, 'SO') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'ST') then starts-with(t_from_my_client/from_account/iban, 'ST') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'SV') then starts-with(t_from_my_client/from_account/iban, 'SV') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'TL') then starts-with(t_from_my_client/from_account/iban, 'TL') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'TN') then starts-with(t_from_my_client/from_account/iban, 'TN') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'TR') then starts-with(t_from_my_client/from_account/iban, 'TR') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'UA') then starts-with(t_from_my_client/from_account/iban, 'UA') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'VA') then starts-with(t_from_my_client/from_account/iban, 'VA') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'VG') then starts-with(t_from_my_client/from_account/iban, 'VG') else if (t_from_my_client/from_account/account and t_from_my_client/from_account/account_type != 'ATM04' and t_from_my_client/from_account/account_type != 'ATM07' and t_from_my_client/from_account/account_type != 'ATM10' and t_from_my_client/from_country = 'XK') then starts-with(t_from_my_client/from_account/iban, 'XK')    else true() " xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-IBN01]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;IBAN - IBAN-Ländercode stimmt nicht mit Kontoland überein (Von–Mein Kunde – Konto).&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
    <xs:assert test="if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'AT') then starts-with(t_from/from_account/iban, 'AT') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'AD') then starts-with(t_from/from_account/iban, 'AD') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'AE') then starts-with(t_from/from_account/iban, 'AE') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'AL') then starts-with(t_from/from_account/iban, 'AL') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'AZ') then starts-with(t_from/from_account/iban, 'AZ') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'BA') then starts-with(t_from/from_account/iban, 'BA') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'BE') then starts-with(t_from/from_account/iban, 'BE') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'BG') then starts-with(t_from/from_account/iban, 'BG') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'BH') then starts-with(t_from/from_account/iban, 'BH') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'BI') then starts-with(t_from/from_account/iban, 'BI') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'BR') then starts-with(t_from/from_account/iban, 'BR') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'BY') then starts-with(t_from/from_account/iban, 'BY') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'CH') then starts-with(t_from/from_account/iban, 'CH') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'CR') then starts-with(t_from/from_account/iban, 'CR') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'CY') then starts-with(t_from/from_account/iban, 'CY') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'CZ') then starts-with(t_from/from_account/iban, 'CZ') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'DE') then starts-with(t_from/from_account/iban, 'DE') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'DJ') then starts-with(t_from/from_account/iban, 'DJ') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'DK') then starts-with(t_from/from_account/iban, 'DK') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'DO') then starts-with(t_from/from_account/iban, 'DO') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'EE') then starts-with(t_from/from_account/iban, 'EE') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'EG') then starts-with(t_from/from_account/iban, 'EG') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'ES') then starts-with(t_from/from_account/iban, 'ES') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'FI') then starts-with(t_from/from_account/iban, 'FI') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'FO') then starts-with(t_from/from_account/iban, 'FO') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'FR') then starts-with(t_from/from_account/iban, 'FR') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'GB') then starts-with(t_from/from_account/iban, 'GB') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'GE') then starts-with(t_from/from_account/iban, 'GE') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'GI') then starts-with(t_from/from_account/iban, 'GI') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'GL') then starts-with(t_from/from_account/iban, 'GL') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'GR') then starts-with(t_from/from_account/iban, 'GR') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'GT') then starts-with(t_from/from_account/iban, 'GT') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'HR') then starts-with(t_from/from_account/iban, 'HR') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'HU') then starts-with(t_from/from_account/iban, 'HU') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'IE') then starts-with(t_from/from_account/iban, 'IE') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'IL') then starts-with(t_from/from_account/iban, 'IL') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'IQ') then starts-with(t_from/from_account/iban, 'IQ') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'IS') then starts-with(t_from/from_account/iban, 'IS') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'IT') then starts-with(t_from/from_account/iban, 'IT') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'JO') then starts-with(t_from/from_account/iban, 'JO') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'KW') then starts-with(t_from/from_account/iban, 'KW') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'KZ') then starts-with(t_from/from_account/iban, 'KZ') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'LB') then starts-with(t_from/from_account/iban, 'LB') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'LC') then starts-with(t_from/from_account/iban, 'LC') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'LI') then starts-with(t_from/from_account/iban, 'LI') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'LT') then starts-with(t_from/from_account/iban, 'LT') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'LU') then starts-with(t_from/from_account/iban, 'LU') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'LV') then starts-with(t_from/from_account/iban, 'LV') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'LY') then starts-with(t_from/from_account/iban, 'LY') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'MC') then starts-with(t_from/from_account/iban, 'MC') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'MD') then starts-with(t_from/from_account/iban, 'MD') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'ME') then starts-with(t_from/from_account/iban, 'ME') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'MK') then starts-with(t_from/from_account/iban, 'MK') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'MR') then starts-with(t_from/from_account/iban, 'MR') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'MT') then starts-with(t_from/from_account/iban, 'MT') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'MU') then starts-with(t_from/from_account/iban, 'MU') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'NL') then starts-with(t_from/from_account/iban, 'NL') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'NO') then starts-with(t_from/from_account/iban, 'NO') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'PK') then starts-with(t_from/from_account/iban, 'PK') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'PL') then starts-with(t_from/from_account/iban, 'PL') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'PS') then starts-with(t_from/from_account/iban, 'PS') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'PT') then starts-with(t_from/from_account/iban, 'PT') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'QA') then starts-with(t_from/from_account/iban, 'QA') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'RO') then starts-with(t_from/from_account/iban, 'RO') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'RS') then starts-with(t_from/from_account/iban, 'RS') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'RU') then starts-with(t_from/from_account/iban, 'RU') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'SA') then starts-with(t_from/from_account/iban, 'SA') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'SC') then starts-with(t_from/from_account/iban, 'SC') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'SD') then starts-with(t_from/from_account/iban, 'SD') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'SE') then starts-with(t_from/from_account/iban, 'SE') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'SI') then starts-with(t_from/from_account/iban, 'SI') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'SK') then starts-with(t_from/from_account/iban, 'SK') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'SM') then starts-with(t_from/from_account/iban, 'SM') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'SO') then starts-with(t_from/from_account/iban, 'SO') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'ST') then starts-with(t_from/from_account/iban, 'ST') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'SV') then starts-with(t_from/from_account/iban, 'SV') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'TL') then starts-with(t_from/from_account/iban, 'TL') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'TN') then starts-with(t_from/from_account/iban, 'TN') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'TR') then starts-with(t_from/from_account/iban, 'TR') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'UA') then starts-with(t_from/from_account/iban, 'UA') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'VA') then starts-with(t_from/from_account/iban, 'VA') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'VG') then starts-with(t_from/from_account/iban, 'VG') else if (t_from/from_account/account and t_from/from_account/account_type != 'ATM04' and t_from/from_account/account_type != 'ATM07' and t_from/from_account/account_type != 'ATM10' and t_from/from_country = 'XK') then starts-with(t_from/from_account/iban, 'XK')    else true() " xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-IBN02]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;IBAN - IBAN-Ländercode stimmt nicht mit Kontoland überein (Von–Konto).&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
    <xs:assert test="if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'AT') then starts-with(t_to_my_client/to_account/iban, 'AT') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'AD') then starts-with(t_to_my_client/to_account/iban, 'AD') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'AE') then starts-with(t_to_my_client/to_account/iban, 'AE') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'AL') then starts-with(t_to_my_client/to_account/iban, 'AL') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'AZ') then starts-with(t_to_my_client/to_account/iban, 'AZ') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'BA') then starts-with(t_to_my_client/to_account/iban, 'BA') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'BE') then starts-with(t_to_my_client/to_account/iban, 'BE') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'BG') then starts-with(t_to_my_client/to_account/iban, 'BG') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'BH') then starts-with(t_to_my_client/to_account/iban, 'BH') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'BI') then starts-with(t_to_my_client/to_account/iban, 'BI') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'BR') then starts-with(t_to_my_client/to_account/iban, 'BR') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'BY') then starts-with(t_to_my_client/to_account/iban, 'BY') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'CH') then starts-with(t_to_my_client/to_account/iban, 'CH') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'CR') then starts-with(t_to_my_client/to_account/iban, 'CR') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'CY') then starts-with(t_to_my_client/to_account/iban, 'CY') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'CZ') then starts-with(t_to_my_client/to_account/iban, 'CZ') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'DE') then starts-with(t_to_my_client/to_account/iban, 'DE') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'DJ') then starts-with(t_to_my_client/to_account/iban, 'DJ') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'DK') then starts-with(t_to_my_client/to_account/iban, 'DK') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'DO') then starts-with(t_to_my_client/to_account/iban, 'DO') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'EE') then starts-with(t_to_my_client/to_account/iban, 'EE') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'EG') then starts-with(t_to_my_client/to_account/iban, 'EG') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'ES') then starts-with(t_to_my_client/to_account/iban, 'ES') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'FI') then starts-with(t_to_my_client/to_account/iban, 'FI') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'FO') then starts-with(t_to_my_client/to_account/iban, 'FO') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'FR') then starts-with(t_to_my_client/to_account/iban, 'FR') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'GB') then starts-with(t_to_my_client/to_account/iban, 'GB') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'GE') then starts-with(t_to_my_client/to_account/iban, 'GE') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'GI') then starts-with(t_to_my_client/to_account/iban, 'GI') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'GL') then starts-with(t_to_my_client/to_account/iban, 'GL') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'GR') then starts-with(t_to_my_client/to_account/iban, 'GR') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'GT') then starts-with(t_to_my_client/to_account/iban, 'GT') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'HR') then starts-with(t_to_my_client/to_account/iban, 'HR') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'HU') then starts-with(t_to_my_client/to_account/iban, 'HU') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'IE') then starts-with(t_to_my_client/to_account/iban, 'IE') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'IL') then starts-with(t_to_my_client/to_account/iban, 'IL') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'IQ') then starts-with(t_to_my_client/to_account/iban, 'IQ') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'IS') then starts-with(t_to_my_client/to_account/iban, 'IS') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'IT') then starts-with(t_to_my_client/to_account/iban, 'IT') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'JO') then starts-with(t_to_my_client/to_account/iban, 'JO') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'KW') then starts-with(t_to_my_client/to_account/iban, 'KW') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'KZ') then starts-with(t_to_my_client/to_account/iban, 'KZ') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'LB') then starts-with(t_to_my_client/to_account/iban, 'LB') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'LC') then starts-with(t_to_my_client/to_account/iban, 'LC') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'LI') then starts-with(t_to_my_client/to_account/iban, 'LI') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'LT') then starts-with(t_to_my_client/to_account/iban, 'LT') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'LU') then starts-with(t_to_my_client/to_account/iban, 'LU') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'LV') then starts-with(t_to_my_client/to_account/iban, 'LV') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'LY') then starts-with(t_to_my_client/to_account/iban, 'LY') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'MC') then starts-with(t_to_my_client/to_account/iban, 'MC') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'MD') then starts-with(t_to_my_client/to_account/iban, 'MD') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'ME') then starts-with(t_to_my_client/to_account/iban, 'ME') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'MK') then starts-with(t_to_my_client/to_account/iban, 'MK') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'MR') then starts-with(t_to_my_client/to_account/iban, 'MR') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'MT') then starts-with(t_to_my_client/to_account/iban, 'MT') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'MU') then starts-with(t_to_my_client/to_account/iban, 'MU') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'NL') then starts-with(t_to_my_client/to_account/iban, 'NL') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'NO') then starts-with(t_to_my_client/to_account/iban, 'NO') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'PK') then starts-with(t_to_my_client/to_account/iban, 'PK') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'PL') then starts-with(t_to_my_client/to_account/iban, 'PL') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'PS') then starts-with(t_to_my_client/to_account/iban, 'PS') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'PT') then starts-with(t_to_my_client/to_account/iban, 'PT') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'QA') then starts-with(t_to_my_client/to_account/iban, 'QA') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'RO') then starts-with(t_to_my_client/to_account/iban, 'RO') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'RS') then starts-with(t_to_my_client/to_account/iban, 'RS') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'RU') then starts-with(t_to_my_client/to_account/iban, 'RU') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'SA') then starts-with(t_to_my_client/to_account/iban, 'SA') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'SC') then starts-with(t_to_my_client/to_account/iban, 'SC') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'SD') then starts-with(t_to_my_client/to_account/iban, 'SD') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'SE') then starts-with(t_to_my_client/to_account/iban, 'SE') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'SI') then starts-with(t_to_my_client/to_account/iban, 'SI') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'SK') then starts-with(t_to_my_client/to_account/iban, 'SK') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'SM') then starts-with(t_to_my_client/to_account/iban, 'SM') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'SO') then starts-with(t_to_my_client/to_account/iban, 'SO') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'ST') then starts-with(t_to_my_client/to_account/iban, 'ST') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'SV') then starts-with(t_to_my_client/to_account/iban, 'SV') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'TL') then starts-with(t_to_my_client/to_account/iban, 'TL') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'TN') then starts-with(t_to_my_client/to_account/iban, 'TN') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'TR') then starts-with(t_to_my_client/to_account/iban, 'TR') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'UA') then starts-with(t_to_my_client/to_account/iban, 'UA') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'VA') then starts-with(t_to_my_client/to_account/iban, 'VA') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'VG') then starts-with(t_to_my_client/to_account/iban, 'VG') else if (t_to_my_client/to_account/account and t_to_my_client/to_account/account_type != 'ATM04' and t_to_my_client/to_account/account_type != 'ATM07' and t_to_my_client/to_account/account_type != 'ATM10' and t_to_my_client/to_country = 'XK') then starts-with(t_to_my_client/to_account/iban, 'XK')    else true() " xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-IBN03]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;IBAN - IBAN-Ländercode stimmt nicht mit Kontoland überein (An–Mein Kunde – Konto).&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
    <xs:assert test="if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'AT') then starts-with(t_to/to_account/iban, 'AT') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'AD') then starts-with(t_to/to_account/iban, 'AD') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'AE') then starts-with(t_to/to_account/iban, 'AE') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'AL') then starts-with(t_to/to_account/iban, 'AL') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'AZ') then starts-with(t_to/to_account/iban, 'AZ') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'BA') then starts-with(t_to/to_account/iban, 'BA') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'BE') then starts-with(t_to/to_account/iban, 'BE') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'BG') then starts-with(t_to/to_account/iban, 'BG') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'BH') then starts-with(t_to/to_account/iban, 'BH') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'BI') then starts-with(t_to/to_account/iban, 'BI') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'BR') then starts-with(t_to/to_account/iban, 'BR') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'BY') then starts-with(t_to/to_account/iban, 'BY') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'CH') then starts-with(t_to/to_account/iban, 'CH') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'CR') then starts-with(t_to/to_account/iban, 'CR') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'CY') then starts-with(t_to/to_account/iban, 'CY') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'CZ') then starts-with(t_to/to_account/iban, 'CZ') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'DE') then starts-with(t_to/to_account/iban, 'DE') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'DJ') then starts-with(t_to/to_account/iban, 'DJ') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'DK') then starts-with(t_to/to_account/iban, 'DK') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'DO') then starts-with(t_to/to_account/iban, 'DO') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'EE') then starts-with(t_to/to_account/iban, 'EE') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'EG') then starts-with(t_to/to_account/iban, 'EG') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'ES') then starts-with(t_to/to_account/iban, 'ES') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'FI') then starts-with(t_to/to_account/iban, 'FI') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'FO') then starts-with(t_to/to_account/iban, 'FO') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'FR') then starts-with(t_to/to_account/iban, 'FR') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'GB') then starts-with(t_to/to_account/iban, 'GB') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'GE') then starts-with(t_to/to_account/iban, 'GE') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'GI') then starts-with(t_to/to_account/iban, 'GI') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'GL') then starts-with(t_to/to_account/iban, 'GL') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'GR') then starts-with(t_to/to_account/iban, 'GR') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'GT') then starts-with(t_to/to_account/iban, 'GT') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'HR') then starts-with(t_to/to_account/iban, 'HR') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'HU') then starts-with(t_to/to_account/iban, 'HU') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'IE') then starts-with(t_to/to_account/iban, 'IE') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'IL') then starts-with(t_to/to_account/iban, 'IL') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'IQ') then starts-with(t_to/to_account/iban, 'IQ') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'IS') then starts-with(t_to/to_account/iban, 'IS') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'IT') then starts-with(t_to/to_account/iban, 'IT') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'JO') then starts-with(t_to/to_account/iban, 'JO') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'KW') then starts-with(t_to/to_account/iban, 'KW') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'KZ') then starts-with(t_to/to_account/iban, 'KZ') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'LB') then starts-with(t_to/to_account/iban, 'LB') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'LC') then starts-with(t_to/to_account/iban, 'LC') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'LI') then starts-with(t_to/to_account/iban, 'LI') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'LT') then starts-with(t_to/to_account/iban, 'LT') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'LU') then starts-with(t_to/to_account/iban, 'LU') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'LV') then starts-with(t_to/to_account/iban, 'LV') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'LY') then starts-with(t_to/to_account/iban, 'LY') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'MC') then starts-with(t_to/to_account/iban, 'MC') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'MD') then starts-with(t_to/to_account/iban, 'MD') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'ME') then starts-with(t_to/to_account/iban, 'ME') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'MK') then starts-with(t_to/to_account/iban, 'MK') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'MR') then starts-with(t_to/to_account/iban, 'MR') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'MT') then starts-with(t_to/to_account/iban, 'MT') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'MU') then starts-with(t_to/to_account/iban, 'MU') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'NL') then starts-with(t_to/to_account/iban, 'NL') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'NO') then starts-with(t_to/to_account/iban, 'NO') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'PK') then starts-with(t_to/to_account/iban, 'PK') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'PL') then starts-with(t_to/to_account/iban, 'PL') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'PS') then starts-with(t_to/to_account/iban, 'PS') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'PT') then starts-with(t_to/to_account/iban, 'PT') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'QA') then starts-with(t_to/to_account/iban, 'QA') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'RO') then starts-with(t_to/to_account/iban, 'RO') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'RS') then starts-with(t_to/to_account/iban, 'RS') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'RU') then starts-with(t_to/to_account/iban, 'RU') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'SA') then starts-with(t_to/to_account/iban, 'SA') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'SC') then starts-with(t_to/to_account/iban, 'SC') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'SD') then starts-with(t_to/to_account/iban, 'SD') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'SE') then starts-with(t_to/to_account/iban, 'SE') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'SI') then starts-with(t_to/to_account/iban, 'SI') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'SK') then starts-with(t_to/to_account/iban, 'SK') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'SM') then starts-with(t_to/to_account/iban, 'SM') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'SO') then starts-with(t_to/to_account/iban, 'SO') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'ST') then starts-with(t_to/to_account/iban, 'ST') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'SV') then starts-with(t_to/to_account/iban, 'SV') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'TL') then starts-with(t_to/to_account/iban, 'TL') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'TN') then starts-with(t_to/to_account/iban, 'TN') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'TR') then starts-with(t_to/to_account/iban, 'TR') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'UA') then starts-with(t_to/to_account/iban, 'UA') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'VA') then starts-with(t_to/to_account/iban, 'VA') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'VG') then starts-with(t_to/to_account/iban, 'VG') else if (t_to/to_account/account and t_to/to_account/account_type != 'ATM04' and t_to/to_account/account_type != 'ATM07' and t_to/to_account/account_type != 'ATM10' and t_to/to_country = 'XK') then starts-with(t_to/to_account/iban, 'XK')    else true() " xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-IBN04]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;IBAN - IBAN-Ländercode stimmt nicht mit Kontoland überein (An–Konto).&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
    <xs:assert test="if (t_from_my_client/from_funds_code = '--') then ( (string-length(t_from_my_client/from_account/comments) &gt;= 5) or (string-length(t_from_my_client/from_entity/comments) &gt;= 5) or (string-length(t_from_my_client/from_person/comments) &gt;= 5) )else true() " xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-FTM01]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;Von-Mein Kunde - Auswahl 'Geldwert in sonstiger Form' erfordert Begründung in Feld 'Kommentar' (&gt;= 5 Zeichen)&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
    <xs:assert test="if (t_from/from_funds_code = '--') then ( (string-length(t_from/from_account/comments) &gt;= 5) or (string-length(t_from/from_entity/comments) &gt;= 5) or (string-length(t_from/from_person/comments) &gt;= 5) ) else true() " xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-FTM02]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;Von - Auswahl 'Geldwert in sonstiger Form' erfordert Begründung in Feld 'Kommentar' (&gt;= 5 Zeichen)&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
    <xs:assert test="if (t_to_my_client/to_funds_code = '--') then ( (string-length(t_to_my_client/to_account/comments) &gt;= 5) or (string-length(t_to_my_client/to_entity/comments) &gt;= 5) or (string-length(t_to_my_client/to_person/comments) &gt;= 5) ) else true() " xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-FTM03]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;An-Mein Kunde - Auswahl 'Geldwert in sonstiger Form' erfordert Begründung in Feld 'Kommentar' (&gt;= 5 Zeichen)&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
    <xs:assert test="if (t_to/to_funds_code = '--') then ( (string-length(t_to/to_account/comments) &gt;= 5) or (string-length(t_to/to_entity/comments) &gt;= 5) or (string-length(t_to/to_person/comments) &gt;= 5) )else true() " xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-FTM04]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;An - Auswahl 'Geldwert in sonstiger Form' erfordert Begründung in Feld 'Kommentar' (&gt;= 5 Zeichen)&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
    <xs:assert test="if (transmode_code = '--') then (string-length(comments) &gt;= 5) else true() " xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-TRA01]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;Art der Transaktion - Auswahl 'Sonstiges' erfordert Begründung in Feld 'Kommentar' (&gt;= 5 Zeichen)&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
    <xs:assert test="if (transaction_status = 'TRS02') then (string-length(comments) &gt;= 5) else true() " xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-TRA02]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;Transaktionsstatus - Auswahl 'nicht abgeschlossen' erfordert Begründung in Feld 'Kommentar' (&gt;= 5 Zeichen)&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
  </xs:complexType>
  <xs:complexType name="t_address">
    <xs:sequence>
      <xs:element name="address_type" type="contact_type" />
      <xs:element name="address">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="house_number" minOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="25" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="apartment_number" minOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="25" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="additional_address_line1" minOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="additional_address_line2" minOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="town">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="city">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="zip">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="10" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="country_code" type="country_type" />
      <xs:element minOccurs="0" name="state">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="1" />
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="geo_location" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence>
            <xs:choice>
              <xs:sequence>
                <xs:element name="latitude" type="xs:decimal" />
                <xs:element name="longitude" type="xs:decimal" />
              </xs:sequence>
              <xs:element name="plus_code">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:minLength value="6" />
                    <xs:maxLength value="25" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:choice>
            <xs:element name="is_approx_location" type="xs:boolean" fixed="1" minOccurs="0" />
            <xs:element name="error_distance_margin" type="xs:decimal" minOccurs="0" />
            <xs:element name="margin_uom" minOccurs="0" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="comments" type="comments_type" />
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="comments_type">
    <xs:restriction base="xs:string">
      <xs:minLength value="0" />
      <xs:maxLength value="8000" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="sql_date">
    <xs:restriction base="xs:dateTime">
      <xs:minInclusive value="1753-01-01T00:00:00" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="transaction_type">
    <xs:restriction base="xs:string" />
  </xs:simpleType>
  <xs:simpleType name="conduction_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="--">
        <!--Sonstiges-->
      </xs:enumeration>
      <xs:enumeration value="TMM01">
        <!--Bankomat Drittanbieter-->
      </xs:enumeration>
      <xs:enumeration value="TMM05">
        <!--Filiale/Persönlich-->
      </xs:enumeration>
      <xs:enumeration value="TMM07">
        <!--Überweisung-->
      </xs:enumeration>
      <xs:enumeration value="TMM08">
        <!--Filialautomat-->
      </xs:enumeration>
      <xs:enumeration value="TMM09">
        <!--POS Zahlung-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="sql_decimal">
    <xs:restriction base="xs:decimal">
      <xs:fractionDigits value="13" />
      <xs:minInclusive value="-7900000000000000" />
      <xs:maxInclusive value="7900000000000000" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="transaction_status_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="TRS01">
        <!--Durchgeführt-->
      </xs:enumeration>
      <xs:enumeration value="TRS02">
        <!--Nicht durchgeführt-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="t_party">
    <xs:sequence>
      <xs:element name="role" type="party_role_type" />
      <xs:choice>
        <xs:element name="person" type="t_person" />
        <xs:element name="person_my_client" type="t_person_my_client" />
        <xs:element name="account" type="t_account" />
        <xs:element name="account_my_client" type="t_account_my_client" />
        <xs:element name="entity" type="t_entity" />
        <xs:element name="entity_my_client" type="t_entity_my_client" />
      </xs:choice>
      <xs:sequence minOccurs="0">
        <xs:element name="funds_code" type="funds_type" />
        <xs:element name="funds_comment" minOccurs="0">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:maxLength value="255" />
            </xs:restriction>
          </xs:simpleType>
        </xs:element>
      </xs:sequence>
      <xs:element minOccurs="0" maxOccurs="0" name="transaction_additional_info" type="transaction_additional_info_type" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element minOccurs="0" name="foreign_currency" type="t_foreign_currency" />
      <xs:element name="country" type="country_type" />
      <xs:element name="is_suspected" type="xs:boolean" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element minOccurs="0" maxOccurs="0" name="significance">
        <xs:simpleType>
          <xs:restriction base="xs:int">
            <xs:minInclusive value="0" />
            <xs:maxInclusive value="10" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="reason" type="comments_type" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element minOccurs="0" name="comments" type="comments_type" />
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="funds_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="--">
        <!--Geldwert in sonstiger Form-->
      </xs:enumeration>
      <xs:enumeration value="FTM02">
        <!--Bargeld-->
      </xs:enumeration>
      <xs:enumeration value="FTM07">
        <!--Giralgeld-->
      </xs:enumeration>
      <xs:enumeration value="FTM08">
        <!--Virtuelle Währung-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="transaction_additional_info_type">
    <xs:sequence>
      <xs:element name="network_device" type="network_device_type" minOccurs="1" />
      <xs:element name="block_number" type="xs:decimal" minOccurs="1" />
      <xs:element minOccurs="1" name="virtual_address">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="t_foreign_currency">
    <xs:sequence>
      <xs:element name="foreign_currency_code" type="currency_type" />
      <xs:element name="foreign_amount" type="sql_decimal" />
      <xs:element name="foreign_exchange_rate" type="sql_decimal" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="t_conductor_my_client" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml">
    <xs:sequence>
      <xs:element minOccurs="1" name="gender" type="gender_type" />
      <xs:element minOccurs="0" name="title">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="30" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="first_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="middle_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="prefix">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="last_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="1" name="birthdate" type="sql_date" />
      <xs:element minOccurs="0" name="birth_place">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="country_of_birth" type="country_type" goaml:supportedIn="5.2" />
      <xs:element minOccurs="0" name="mothers_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="alias">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="full_name_frn" minOccurs="0" goaml:supportedIn="5.2">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="previous_names" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="previous_name" type="previous_name_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="ssn">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="25" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:sequence minOccurs="0" maxOccurs="0">
        <xs:element name="passport_number">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:minLength value="1" />
              <xs:maxLength value="255" />
            </xs:restriction>
          </xs:simpleType>
        </xs:element>
        <xs:element minOccurs="0" name="passport_country" type="country_type" />
      </xs:sequence>
      <xs:element minOccurs="0" name="id_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="nationality1" type="country_type" />
      <xs:element minOccurs="0" name="nationality2" type="country_type" />
      <xs:element minOccurs="0" name="nationality3" type="country_type" />
      <xs:element minOccurs="0" name="residence" type="country_type" />
      <xs:element name="residence_since" type="sql_date" minOccurs="0" goaml:supportedIn="5.2" />
      <xs:element minOccurs="0" name="phones">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element minOccurs="0" name="phone" type="t_phone" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="addresses">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element minOccurs="0" name="address" type="t_address" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="network_devices" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="network_device" type="network_device_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:element name="email" type="email_address" maxOccurs="5">
          <xs:annotation>
            <xs:documentation>The element will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="emails" goaml:supportedIn="5.2">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="email" type="email_address" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:element name="social_media" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="social_account" type="social_account_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="occupation">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:sequence>
          <xs:annotation>
            <xs:documentation>The complex node will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
          <xs:element name="employer_name">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="255" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="employer_address_id" type="t_address" />
          <xs:element minOccurs="0" name="employer_phone_id" type="t_phone" />
        </xs:sequence>
        <xs:element name="employment_history" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="employment" type="employer_type" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element maxOccurs="unbounded" name="identification" type="t_person_identification">
          <xs:annotation>
            <xs:documentation>The complex node will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="identifications" goaml:supportedIn="5.2">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="identification" type="t_person_identification" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:sequence minOccurs="0">
        <xs:element minOccurs="0" fixed="1" name="deceased">
          <xs:simpleType>
            <xs:restriction base="xs:boolean" />
          </xs:simpleType>
        </xs:element>
        <xs:element minOccurs="0" name="date_deceased" type="sql_date" />
      </xs:sequence>
      <xs:element minOccurs="0" name="tax_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="tax_reg_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="source_of_wealth">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="peps" minOccurs="0" goaml:supportedIn="5.2">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="pep" type="pep_details" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="is_protected" type="xs:boolean" minOccurs="0" goaml:supportedIn="5.2" />
      <xs:element name="sanctions" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="sanction_list" type="sanction_list_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="related_persons" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="person_related_person" type="person_related_person_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="re_relationship" goaml:supportedIn="5.2">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="client_number">
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="255" />
                  <xs:minLength value="1" />
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element name="relationship_date_range" type="relation_date_range_type" />
            <xs:element minOccurs="0" name="comments" type="comments_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="additional_information" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="additional_info" type="generic_additional_info_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="comments" type="comments_type" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="t_account_my_client">
    <xs:sequence>
      <xs:element minOccurs="0" name="institution_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="1" />
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:choice>
        <xs:element name="institution_code">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:minLength value="1" />
              <xs:maxLength value="50" />
            </xs:restriction>
          </xs:simpleType>
        </xs:element>
        <xs:element name="swift">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:maxLength value="11" />
              <xs:minLength value="1" />
            </xs:restriction>
          </xs:simpleType>
        </xs:element>
      </xs:choice>
      <xs:element name="institution_country" type="country_type" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element minOccurs="0" name="non_bank_institution" type="xs:boolean" />
      <xs:element name="collection_account" type="xs:boolean" fixed="1" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element minOccurs="1" name="branch">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="account_category" type="account_category_type" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element name="account">
        <xs:annotation>
          <xs:documentation>
        The account length was extended to 255 chars
      </xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="currency_code" type="currency_type" />
      <xs:element name="account_funds" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="account_fund" type="account_fund_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="account_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="iban" type="iban_type" />
      <xs:element minOccurs="0" maxOccurs="0" name="client_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="30" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:element name="personal_account_type" type="account_type">
          <xs:annotation>
            <xs:documentation>The element will be deprecated in Schema 6 and replaced by the new account_type element</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="account_type" type="account_type" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      </xs:choice>
      <xs:element minOccurs="0" name="t_entity" type="t_entity_my_client" />
      <xs:element name="related_entities" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="account_related_entity" type="account_related_entity_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:choice>
        <xs:element maxOccurs="unbounded" name="signatory">
          <xs:annotation>
            <xs:documentation>The signatory node will be deprecated in Schema 6 and replaced by the new node related_persons</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" fixed="1" name="is_primary">
                <xs:simpleType>
                  <xs:restriction base="xs:boolean" />
                </xs:simpleType>
              </xs:element>
              <xs:element name="t_person" type="t_person_my_client" />
              <xs:element minOccurs="0" name="role" type="account_person_role_type" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="related_persons" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="account_related_person" type="account_related_person_my_client_type" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:element name="related_accounts" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="account_related_account" type="account_related_account_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="1" name="opened" type="sql_date" />
      <xs:element minOccurs="0" name="closed" type="sql_date" />
      <xs:sequence minOccurs="1">
        <xs:element name="balance" type="sql_decimal" minOccurs="1" />
        <xs:element minOccurs="1" name="date_balance" type="sql_date" />
      </xs:sequence>
      <xs:sequence minOccurs="0">
        <xs:element name="status_code" type="account_status_type" />
        <xs:element name="status_date" type="sql_date" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      </xs:sequence>
      <xs:element minOccurs="0" maxOccurs="0" name="beneficiary">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="50" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="beneficiary_comment">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="network_devices" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="network_device" type="network_device_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="sanctions" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="sanction_list" type="sanction_list_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="additional_information" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="additional_info" type="generic_additional_info_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="comments" type="comments_type" />
    </xs:sequence>
    <xs:assert test="if (iban) then (iban eq account) else true()" xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-ACC01]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;Konto-Mein Kunde - Bei Angabe eines IBANs muss im Feld 'Kontonummer' der gleiche IBAN angegeben werden&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
    <xs:assert test="if (account_type = 'ATM04') then (matches(account, '^(\d{13,19})$') ) else true()" xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-ACC02]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;Konto-Mein Kunde - Bei Auswahl 'Kreditkarte' werden 13-19 Ziffern erwartet (ISO/IEC 7812)&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
    <xs:assert test="if (account_type = 'ATM04') then ( related_accounts/node() ) else true()" xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-ACC03]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;Konto-Mein Kunde - Bei Auswahl 'Kreditkarte' muss beim eigenen Kunden ein Referenz- / Bezugskonto angegeben werden&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
  </xs:complexType>
  <xs:complexType name="t_person_my_client">
    <xs:sequence>
      <xs:element minOccurs="1" name="gender" type="gender_type" />
      <xs:element minOccurs="0" name="title">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="30" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="first_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="middle_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="prefix">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="last_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="1" name="birthdate" type="sql_date" />
      <xs:element minOccurs="0" name="birth_place">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="country_of_birth" type="country_type" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element minOccurs="0" name="mothers_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="alias">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="full_name_frn" minOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="previous_names" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="previous_name" type="previous_name_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="ssn">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="25" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:sequence minOccurs="0" maxOccurs="0">
        <xs:element name="passport_number">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:minLength value="1" />
              <xs:maxLength value="255" />
            </xs:restriction>
          </xs:simpleType>
        </xs:element>
        <xs:element minOccurs="0" name="passport_country" type="country_type" />
      </xs:sequence>
      <xs:element minOccurs="0" name="id_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="nationality1" type="country_type" />
      <xs:element minOccurs="0" name="nationality2" type="country_type" />
      <xs:element minOccurs="0" name="nationality3" type="country_type" />
      <xs:element minOccurs="0" name="residence" type="country_type" />
      <xs:element name="residence_since" type="sql_date" minOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element minOccurs="0" name="phones">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element minOccurs="0" name="phone" type="t_phone" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="addresses">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element minOccurs="0" name="address" type="t_address" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="network_devices" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="network_device" type="network_device_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:element name="email" type="email_address" maxOccurs="5">
          <xs:annotation>
            <xs:documentation>The element will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="emails" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="email" type="email_address" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:element name="social_media" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="social_account" type="social_account_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="occupation">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:sequence>
          <xs:annotation>
            <xs:documentation>The complex node will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
          <xs:element name="employer_name">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="255" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="employer_address_id" type="t_address" />
          <xs:element minOccurs="0" name="employer_phone_id" type="t_phone" />
        </xs:sequence>
        <xs:element name="employment_history" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="employment" type="employer_type" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element maxOccurs="unbounded" name="identification" type="t_person_identification">
          <xs:annotation>
            <xs:documentation>The complex node will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="identifications" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="identification" type="t_person_identification" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:sequence minOccurs="0">
        <xs:element minOccurs="0" fixed="1" name="deceased">
          <xs:simpleType>
            <xs:restriction base="xs:boolean" />
          </xs:simpleType>
        </xs:element>
        <xs:element minOccurs="0" name="date_deceased" type="sql_date" />
      </xs:sequence>
      <xs:element minOccurs="0" name="tax_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="tax_reg_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="source_of_wealth">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="peps" minOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="pep" type="pep_details" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="is_protected" type="xs:boolean" minOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element name="sanctions" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="sanction_list" type="sanction_list_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="related_persons" minOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="person_related_person" type="person_related_person_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="re_relationship" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="client_number">
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="255" />
                  <xs:minLength value="1" />
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element name="relationship_date_range" type="relation_date_range_type" />
            <xs:element minOccurs="0" name="comments" type="comments_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="additional_information" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="additional_info" type="generic_additional_info_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="comments" type="comments_type" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="t_entity_my_client">
    <xs:sequence>
      <xs:element name="name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="commercial_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="incorporation_legal_form" type="legal_form_type" />
      <xs:element minOccurs="0" name="incorporation_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="50" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="business">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:sequence minOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:element name="entity_status" type="entity_status_type" minOccurs="0" />
        <xs:element name="entity_status_date" type="sql_date" minOccurs="0" />
      </xs:sequence>
      <xs:element minOccurs="0" name="phones">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element minOccurs="0" name="phone" type="t_phone" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="addresses">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element minOccurs="0" name="address" type="t_address" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="network_devices" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="network_device" type="network_device_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:element name="email" type="email_address" maxOccurs="5">
          <xs:annotation>
            <xs:documentation>The element will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="emails" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="email" type="email_address" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="url">
          <xs:annotation>
            <xs:documentation>The element will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:maxLength value="255" />
            </xs:restriction>
          </xs:simpleType>
        </xs:element>
        <xs:element name="urls" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="url">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="255" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:element minOccurs="0" name="incorporation_state">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="incorporation_country_code" type="country_type" />
      <xs:choice minOccurs="0">
        <xs:element maxOccurs="unbounded" name="director_id">
          <xs:annotation>
            <xs:documentation>The node will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:complexContent mixed="false">
              <xs:extension base="t_person">
                <xs:sequence minOccurs="0">
                  <xs:element name="role" type="entity_person_role_type" />
                </xs:sequence>
              </xs:extension>
            </xs:complexContent>
          </xs:complexType>
        </xs:element>
        <xs:element name="related_persons" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="entity_related_person" type="entity_related_person_type" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:element name="related_entities" minOccurs="0" goaml:supportedIn="5.0" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="entity_related_entity" type="entity_related_entity_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="incorporation_date" type="sql_date" />
      <xs:sequence minOccurs="0">
        <xs:element minOccurs="0" fixed="1" name="business_closed">
          <xs:simpleType>
            <xs:restriction base="xs:boolean" />
          </xs:simpleType>
        </xs:element>
        <xs:element minOccurs="0" name="date_business_closed" type="sql_date" />
      </xs:sequence>
      <xs:element minOccurs="0" name="tax_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="tax_reg_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="entity_identifications" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="entity_identifier" type="t_entity_identification" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="re_relationship" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="client_number">
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="255" />
                  <xs:minLength value="1" />
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element name="relationship_date_range" type="relation_date_range_type" />
            <xs:element minOccurs="0" name="comments" type="comments_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="sanctions" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="sanction_list" type="sanction_list_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="additional_information" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="additional_info" type="generic_additional_info_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="comments" type="comments_type" />
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="country_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="-">
        <!--Unbekannt-->
      </xs:enumeration>
      <xs:enumeration value="AD">
        <!--Andorra-->
      </xs:enumeration>
      <xs:enumeration value="AE">
        <!--Vereinigte Arabische Emirate-->
      </xs:enumeration>
      <xs:enumeration value="AF">
        <!--Afghanistan-->
      </xs:enumeration>
      <xs:enumeration value="AG">
        <!--Antigua und Barbuda-->
      </xs:enumeration>
      <xs:enumeration value="AI">
        <!--Anguilla-->
      </xs:enumeration>
      <xs:enumeration value="AL">
        <!--Albanien-->
      </xs:enumeration>
      <xs:enumeration value="AM">
        <!--Armenien-->
      </xs:enumeration>
      <xs:enumeration value="AO">
        <!--Angola-->
      </xs:enumeration>
      <xs:enumeration value="AQ">
        <!--Antarktika-->
      </xs:enumeration>
      <xs:enumeration value="AR">
        <!--Argentinien-->
      </xs:enumeration>
      <xs:enumeration value="AS">
        <!--Amerikanisch-Samoa-->
      </xs:enumeration>
      <xs:enumeration value="AT">
        <!--Österreich-->
      </xs:enumeration>
      <xs:enumeration value="AU">
        <!--Australien-->
      </xs:enumeration>
      <xs:enumeration value="AW">
        <!--Aruba-->
      </xs:enumeration>
      <xs:enumeration value="AX">
        <!--Ålandinseln-->
      </xs:enumeration>
      <xs:enumeration value="AZ">
        <!--Aserbaidschan-->
      </xs:enumeration>
      <xs:enumeration value="BA">
        <!--Bosnien und Herzegowina-->
      </xs:enumeration>
      <xs:enumeration value="BB">
        <!--Barbados -->
      </xs:enumeration>
      <xs:enumeration value="BD">
        <!--Bangladesch-->
      </xs:enumeration>
      <xs:enumeration value="BE">
        <!--Belgien-->
      </xs:enumeration>
      <xs:enumeration value="BF">
        <!--Burkina Faso-->
      </xs:enumeration>
      <xs:enumeration value="BG">
        <!--Bulgarien-->
      </xs:enumeration>
      <xs:enumeration value="BH">
        <!--Bahrain-->
      </xs:enumeration>
      <xs:enumeration value="BI">
        <!--Burundi-->
      </xs:enumeration>
      <xs:enumeration value="BJ">
        <!--Benin-->
      </xs:enumeration>
      <xs:enumeration value="BL">
        <!--St. Barthélemy-->
      </xs:enumeration>
      <xs:enumeration value="BM">
        <!--Bermuda-->
      </xs:enumeration>
      <xs:enumeration value="BN">
        <!--Brunei Darussalam-->
      </xs:enumeration>
      <xs:enumeration value="BO">
        <!--Bolivien, Plurinationaler Staat -->
      </xs:enumeration>
      <xs:enumeration value="BQ">
        <!--Bonaire, Saint Eustatius und Saba (Karibische Niederlande)-->
      </xs:enumeration>
      <xs:enumeration value="BR">
        <!--Brasilien-->
      </xs:enumeration>
      <xs:enumeration value="BS">
        <!--Bahamas-->
      </xs:enumeration>
      <xs:enumeration value="BT">
        <!--Bhutan-->
      </xs:enumeration>
      <xs:enumeration value="BV">
        <!--Bouvetinsel-->
      </xs:enumeration>
      <xs:enumeration value="BW">
        <!--Botsuana-->
      </xs:enumeration>
      <xs:enumeration value="BY">
        <!--Belarus, Weißrussland-->
      </xs:enumeration>
      <xs:enumeration value="BZ">
        <!--Belize -->
      </xs:enumeration>
      <xs:enumeration value="CA">
        <!--Kanada-->
      </xs:enumeration>
      <xs:enumeration value="CC">
        <!--Kokosinseln (Keelinginseln)-->
      </xs:enumeration>
      <xs:enumeration value="CD">
        <!--Kongo, Demokratische Republik-->
      </xs:enumeration>
      <xs:enumeration value="CF">
        <!--Zentralafrikanische Republik-->
      </xs:enumeration>
      <xs:enumeration value="CG">
        <!--Kongo-->
      </xs:enumeration>
      <xs:enumeration value="CH">
        <!--Schweiz-->
      </xs:enumeration>
      <xs:enumeration value="CI">
        <!--Elfenbeinküste-->
      </xs:enumeration>
      <xs:enumeration value="CK">
        <!--Cookinseln-->
      </xs:enumeration>
      <xs:enumeration value="CL">
        <!--Chile-->
      </xs:enumeration>
      <xs:enumeration value="CM">
        <!--Kamerun-->
      </xs:enumeration>
      <xs:enumeration value="CN">
        <!--China-->
      </xs:enumeration>
      <xs:enumeration value="CO">
        <!--Kolumbien-->
      </xs:enumeration>
      <xs:enumeration value="CR">
        <!--Costa Rica-->
      </xs:enumeration>
      <xs:enumeration value="CU">
        <!--Kuba-->
      </xs:enumeration>
      <xs:enumeration value="CV">
        <!--Kap Verde-->
      </xs:enumeration>
      <xs:enumeration value="CW">
        <!--Curaçao-->
      </xs:enumeration>
      <xs:enumeration value="CX">
        <!--Weihnachtsinsel-->
      </xs:enumeration>
      <xs:enumeration value="CY">
        <!--Zypern-->
      </xs:enumeration>
      <xs:enumeration value="CZ">
        <!--Tschechische Republik-->
      </xs:enumeration>
      <xs:enumeration value="DE">
        <!--Deutschland-->
      </xs:enumeration>
      <xs:enumeration value="DJ">
        <!--Dschibuti-->
      </xs:enumeration>
      <xs:enumeration value="DK">
        <!--Dänemark-->
      </xs:enumeration>
      <xs:enumeration value="DM">
        <!--Dominica-->
      </xs:enumeration>
      <xs:enumeration value="DO">
        <!--Dominikanische Republik-->
      </xs:enumeration>
      <xs:enumeration value="DZ">
        <!--Algerien-->
      </xs:enumeration>
      <xs:enumeration value="EC">
        <!--Ecuador -->
      </xs:enumeration>
      <xs:enumeration value="EE">
        <!--Estland-->
      </xs:enumeration>
      <xs:enumeration value="EG">
        <!--Ägypten-->
      </xs:enumeration>
      <xs:enumeration value="EH">
        <!--Westsahara-->
      </xs:enumeration>
      <xs:enumeration value="ER">
        <!--Eritrea-->
      </xs:enumeration>
      <xs:enumeration value="ES">
        <!--Spanien-->
      </xs:enumeration>
      <xs:enumeration value="ET">
        <!--Äthiopien -->
      </xs:enumeration>
      <xs:enumeration value="FI">
        <!--Finnland-->
      </xs:enumeration>
      <xs:enumeration value="FJ">
        <!--Fidschi-->
      </xs:enumeration>
      <xs:enumeration value="FK">
        <!--Falklandinseln (Malwinen)-->
      </xs:enumeration>
      <xs:enumeration value="FM">
        <!--Mikronesien, Föderierte Staaten von-->
      </xs:enumeration>
      <xs:enumeration value="FO">
        <!--Färöer-->
      </xs:enumeration>
      <xs:enumeration value="FR">
        <!--Frankreich-->
      </xs:enumeration>
      <xs:enumeration value="GA">
        <!--Gabun-->
      </xs:enumeration>
      <xs:enumeration value="GB">
        <!--Vereinigtes Königreich-->
      </xs:enumeration>
      <xs:enumeration value="GD">
        <!--Grenada-->
      </xs:enumeration>
      <xs:enumeration value="GE">
        <!--Georgien-->
      </xs:enumeration>
      <xs:enumeration value="GF">
        <!--Französisch-Guayana-->
      </xs:enumeration>
      <xs:enumeration value="GG">
        <!--Guernsey-->
      </xs:enumeration>
      <xs:enumeration value="GH">
        <!--Ghana-->
      </xs:enumeration>
      <xs:enumeration value="GI">
        <!--Gibraltar-->
      </xs:enumeration>
      <xs:enumeration value="GL">
        <!--Grönland-->
      </xs:enumeration>
      <xs:enumeration value="GM">
        <!--Gambia-->
      </xs:enumeration>
      <xs:enumeration value="GN">
        <!--Guinea-->
      </xs:enumeration>
      <xs:enumeration value="GP">
        <!--Guadeloupe-->
      </xs:enumeration>
      <xs:enumeration value="GQ">
        <!--Äquatorialguinea-->
      </xs:enumeration>
      <xs:enumeration value="GR">
        <!--Griechenland-->
      </xs:enumeration>
      <xs:enumeration value="GS">
        <!--Südgeorgien und Südliche Sandwichinseln-->
      </xs:enumeration>
      <xs:enumeration value="GT">
        <!--Guatemala-->
      </xs:enumeration>
      <xs:enumeration value="GU">
        <!--Guam-->
      </xs:enumeration>
      <xs:enumeration value="GW">
        <!--Guinea-Bissau-->
      </xs:enumeration>
      <xs:enumeration value="GY">
        <!--Guyana-->
      </xs:enumeration>
      <xs:enumeration value="HK">
        <!--Hongkong-->
      </xs:enumeration>
      <xs:enumeration value="HM">
        <!--Heard und McDonaldinseln-->
      </xs:enumeration>
      <xs:enumeration value="HN">
        <!--Honduras-->
      </xs:enumeration>
      <xs:enumeration value="HR">
        <!--Kroatien-->
      </xs:enumeration>
      <xs:enumeration value="HT">
        <!--Haiti-->
      </xs:enumeration>
      <xs:enumeration value="HU">
        <!--Ungarn-->
      </xs:enumeration>
      <xs:enumeration value="ID">
        <!--Indonesien-->
      </xs:enumeration>
      <xs:enumeration value="IE">
        <!--Irland-->
      </xs:enumeration>
      <xs:enumeration value="IL">
        <!--Israel-->
      </xs:enumeration>
      <xs:enumeration value="IM">
        <!--Insel Man-->
      </xs:enumeration>
      <xs:enumeration value="IN">
        <!--Indien-->
      </xs:enumeration>
      <xs:enumeration value="IO">
        <!--Britisches Territorium im Indischen Ozean -->
      </xs:enumeration>
      <xs:enumeration value="IQ">
        <!--Irak-->
      </xs:enumeration>
      <xs:enumeration value="IR">
        <!--Iran, Islamische Republik-->
      </xs:enumeration>
      <xs:enumeration value="IS">
        <!--Island-->
      </xs:enumeration>
      <xs:enumeration value="IT">
        <!--Italien-->
      </xs:enumeration>
      <xs:enumeration value="JE">
        <!--Jersey-->
      </xs:enumeration>
      <xs:enumeration value="JM">
        <!--Jamaika-->
      </xs:enumeration>
      <xs:enumeration value="JO">
        <!--Jordanien-->
      </xs:enumeration>
      <xs:enumeration value="JP">
        <!--Japan-->
      </xs:enumeration>
      <xs:enumeration value="KE">
        <!--Kenia-->
      </xs:enumeration>
      <xs:enumeration value="KG">
        <!--Kirgisistan-->
      </xs:enumeration>
      <xs:enumeration value="KH">
        <!--Kambodscha-->
      </xs:enumeration>
      <xs:enumeration value="KI">
        <!--Kiribati-->
      </xs:enumeration>
      <xs:enumeration value="KM">
        <!--Komoren-->
      </xs:enumeration>
      <xs:enumeration value="KN">
        <!--St. Kitts und Nevis-->
      </xs:enumeration>
      <xs:enumeration value="KP">
        <!--Korea, Demokratische Volksrepublik-->
      </xs:enumeration>
      <xs:enumeration value="KR">
        <!--Korea, Republik-->
      </xs:enumeration>
      <xs:enumeration value="KW">
        <!--Kuwait-->
      </xs:enumeration>
      <xs:enumeration value="KY">
        <!--Kaimaninseln-->
      </xs:enumeration>
      <xs:enumeration value="KZ">
        <!--Kasachstan-->
      </xs:enumeration>
      <xs:enumeration value="LA">
        <!--Laos, Demokratische Volksrepublik-->
      </xs:enumeration>
      <xs:enumeration value="LB">
        <!--Libanon-->
      </xs:enumeration>
      <xs:enumeration value="LC">
        <!--St. Lucia-->
      </xs:enumeration>
      <xs:enumeration value="LI">
        <!--Liechtenstein -->
      </xs:enumeration>
      <xs:enumeration value="LK">
        <!--Sri Lanka-->
      </xs:enumeration>
      <xs:enumeration value="LR">
        <!--Liberia-->
      </xs:enumeration>
      <xs:enumeration value="LS">
        <!--Lesotho-->
      </xs:enumeration>
      <xs:enumeration value="LT">
        <!--Litauen-->
      </xs:enumeration>
      <xs:enumeration value="LU">
        <!--Luxemburg -->
      </xs:enumeration>
      <xs:enumeration value="LV">
        <!--Lettland-->
      </xs:enumeration>
      <xs:enumeration value="LY">
        <!--Libyen-->
      </xs:enumeration>
      <xs:enumeration value="MA">
        <!--Marokko-->
      </xs:enumeration>
      <xs:enumeration value="MC">
        <!--Monaco-->
      </xs:enumeration>
      <xs:enumeration value="MD">
        <!--Moldau, Republik-->
      </xs:enumeration>
      <xs:enumeration value="ME">
        <!--Montenegro-->
      </xs:enumeration>
      <xs:enumeration value="MF">
        <!--St. Martin (frz.)-->
      </xs:enumeration>
      <xs:enumeration value="MG">
        <!--Madagaskar-->
      </xs:enumeration>
      <xs:enumeration value="MH">
        <!--Marshallinseln-->
      </xs:enumeration>
      <xs:enumeration value="MK">
        <!--Nordmazedonien-->
      </xs:enumeration>
      <xs:enumeration value="ML">
        <!--Mali-->
      </xs:enumeration>
      <xs:enumeration value="MM">
        <!--Myanmar-->
      </xs:enumeration>
      <xs:enumeration value="MN">
        <!--Mongolei-->
      </xs:enumeration>
      <xs:enumeration value="MO">
        <!--Macau-->
      </xs:enumeration>
      <xs:enumeration value="MP">
        <!--Nördliche Marianen-->
      </xs:enumeration>
      <xs:enumeration value="MQ">
        <!--Martinique-->
      </xs:enumeration>
      <xs:enumeration value="MR">
        <!--Mauretanien-->
      </xs:enumeration>
      <xs:enumeration value="MS">
        <!--Montserrat-->
      </xs:enumeration>
      <xs:enumeration value="MT">
        <!--Malta-->
      </xs:enumeration>
      <xs:enumeration value="MU">
        <!--Mauritius-->
      </xs:enumeration>
      <xs:enumeration value="MV">
        <!--Malediven-->
      </xs:enumeration>
      <xs:enumeration value="MW">
        <!--Malawi-->
      </xs:enumeration>
      <xs:enumeration value="MX">
        <!--Mexiko-->
      </xs:enumeration>
      <xs:enumeration value="MY">
        <!--Malaysia-->
      </xs:enumeration>
      <xs:enumeration value="MZ">
        <!--Mosambik-->
      </xs:enumeration>
      <xs:enumeration value="NA">
        <!--Namibia-->
      </xs:enumeration>
      <xs:enumeration value="NC">
        <!--Neukaledonien -->
      </xs:enumeration>
      <xs:enumeration value="NE">
        <!--Niger-->
      </xs:enumeration>
      <xs:enumeration value="NF">
        <!--Norfolkinsel-->
      </xs:enumeration>
      <xs:enumeration value="NG">
        <!--Nigeria-->
      </xs:enumeration>
      <xs:enumeration value="NI">
        <!--Nicaragua-->
      </xs:enumeration>
      <xs:enumeration value="NL">
        <!--Niederlande-->
      </xs:enumeration>
      <xs:enumeration value="NO">
        <!--Norwegen-->
      </xs:enumeration>
      <xs:enumeration value="NP">
        <!--Nepal-->
      </xs:enumeration>
      <xs:enumeration value="NR">
        <!--Nauru-->
      </xs:enumeration>
      <xs:enumeration value="NU">
        <!--Niue-->
      </xs:enumeration>
      <xs:enumeration value="NZ">
        <!--Neuseeland-->
      </xs:enumeration>
      <xs:enumeration value="OM">
        <!--Oman-->
      </xs:enumeration>
      <xs:enumeration value="PA">
        <!--Panama-->
      </xs:enumeration>
      <xs:enumeration value="PE">
        <!--Peru-->
      </xs:enumeration>
      <xs:enumeration value="PF">
        <!--Französisch-Polynesien-->
      </xs:enumeration>
      <xs:enumeration value="PG">
        <!--Papua-Neuguinea-->
      </xs:enumeration>
      <xs:enumeration value="PH">
        <!--Philippinen-->
      </xs:enumeration>
      <xs:enumeration value="PK">
        <!--Pakistan-->
      </xs:enumeration>
      <xs:enumeration value="PL">
        <!--Polen-->
      </xs:enumeration>
      <xs:enumeration value="PM">
        <!--St. Pierre und Miquelon-->
      </xs:enumeration>
      <xs:enumeration value="PN">
        <!--Pitcairninseln-->
      </xs:enumeration>
      <xs:enumeration value="PR">
        <!--Puerto Rico-->
      </xs:enumeration>
      <xs:enumeration value="PS">
        <!--Palästinensische Gebiete-->
      </xs:enumeration>
      <xs:enumeration value="PT">
        <!--Portugal-->
      </xs:enumeration>
      <xs:enumeration value="PW">
        <!--Palau-->
      </xs:enumeration>
      <xs:enumeration value="PY">
        <!--Paraguay-->
      </xs:enumeration>
      <xs:enumeration value="QA">
        <!--Katar -->
      </xs:enumeration>
      <xs:enumeration value="RE">
        <!--Réunion-->
      </xs:enumeration>
      <xs:enumeration value="RO">
        <!--Rumänien-->
      </xs:enumeration>
      <xs:enumeration value="RS">
        <!--Serbien-->
      </xs:enumeration>
      <xs:enumeration value="RU">
        <!--Russische Föderation-->
      </xs:enumeration>
      <xs:enumeration value="RW">
        <!--Ruanda-->
      </xs:enumeration>
      <xs:enumeration value="SA">
        <!--Saudi-Arabien-->
      </xs:enumeration>
      <xs:enumeration value="SB">
        <!--Salomonen -->
      </xs:enumeration>
      <xs:enumeration value="SC">
        <!--Seychellen-->
      </xs:enumeration>
      <xs:enumeration value="SD">
        <!--Sudan-->
      </xs:enumeration>
      <xs:enumeration value="SE">
        <!--Schweden-->
      </xs:enumeration>
      <xs:enumeration value="SG">
        <!--Singapur-->
      </xs:enumeration>
      <xs:enumeration value="SH">
        <!--St. Helena, Ascension und Tristan da Cunha-->
      </xs:enumeration>
      <xs:enumeration value="SI">
        <!--Slowenien-->
      </xs:enumeration>
      <xs:enumeration value="SJ">
        <!--Svalbard und Jan Mayen-->
      </xs:enumeration>
      <xs:enumeration value="SK">
        <!--Slowakei-->
      </xs:enumeration>
      <xs:enumeration value="SL">
        <!--Sierra Leone-->
      </xs:enumeration>
      <xs:enumeration value="SM">
        <!--San Marino-->
      </xs:enumeration>
      <xs:enumeration value="SN">
        <!--Senegal-->
      </xs:enumeration>
      <xs:enumeration value="SO">
        <!--Somalia-->
      </xs:enumeration>
      <xs:enumeration value="SR">
        <!--Suriname-->
      </xs:enumeration>
      <xs:enumeration value="SS">
        <!--Südsudan -->
      </xs:enumeration>
      <xs:enumeration value="ST">
        <!--São Tomé und Príncipe-->
      </xs:enumeration>
      <xs:enumeration value="SV">
        <!--El Salvador-->
      </xs:enumeration>
      <xs:enumeration value="SX">
        <!--St. Martin (niederl.)-->
      </xs:enumeration>
      <xs:enumeration value="SY">
        <!--Syrien, Arabische Republik-->
      </xs:enumeration>
      <xs:enumeration value="SZ">
        <!--Swasiland -->
      </xs:enumeration>
      <xs:enumeration value="TC">
        <!--Turks- und Caicosinseln-->
      </xs:enumeration>
      <xs:enumeration value="TD">
        <!--Tschad-->
      </xs:enumeration>
      <xs:enumeration value="TF">
        <!--Französische Süd- und Antarktisgebiete-->
      </xs:enumeration>
      <xs:enumeration value="TG">
        <!--Togo-->
      </xs:enumeration>
      <xs:enumeration value="TH">
        <!--Thailand-->
      </xs:enumeration>
      <xs:enumeration value="TJ">
        <!--Tadschikistan -->
      </xs:enumeration>
      <xs:enumeration value="TK">
        <!--Tokelau (Zollgebiet)-->
      </xs:enumeration>
      <xs:enumeration value="TL">
        <!--Timor-Leste-->
      </xs:enumeration>
      <xs:enumeration value="TM">
        <!--Turkmenistan-->
      </xs:enumeration>
      <xs:enumeration value="TN">
        <!--Tunesien-->
      </xs:enumeration>
      <xs:enumeration value="TO">
        <!--Tonga-->
      </xs:enumeration>
      <xs:enumeration value="TR">
        <!--Türkei-->
      </xs:enumeration>
      <xs:enumeration value="TT">
        <!--Trinidad und Tobago-->
      </xs:enumeration>
      <xs:enumeration value="TV">
        <!--Tuvalu-->
      </xs:enumeration>
      <xs:enumeration value="TW">
        <!--Taiwan-->
      </xs:enumeration>
      <xs:enumeration value="TZ">
        <!--Tansania, Vereinigte Republik-->
      </xs:enumeration>
      <xs:enumeration value="UA">
        <!--Ukraine-->
      </xs:enumeration>
      <xs:enumeration value="UG">
        <!--Uganda-->
      </xs:enumeration>
      <xs:enumeration value="UM">
        <!--Kleinere Amerikanische Überseeinseln-->
      </xs:enumeration>
      <xs:enumeration value="US">
        <!--Vereinigte Staaten-->
      </xs:enumeration>
      <xs:enumeration value="UY">
        <!--Uruguay-->
      </xs:enumeration>
      <xs:enumeration value="UZ">
        <!--Usbekistan-->
      </xs:enumeration>
      <xs:enumeration value="VA">
        <!--Vatikanstadt -->
      </xs:enumeration>
      <xs:enumeration value="VC">
        <!--St. Vincent und die Grenadinen-->
      </xs:enumeration>
      <xs:enumeration value="VE">
        <!--Venezuela-->
      </xs:enumeration>
      <xs:enumeration value="VG">
        <!--Britische Jungferninseln-->
      </xs:enumeration>
      <xs:enumeration value="VI">
        <!--Amerikanische Jungferninseln-->
      </xs:enumeration>
      <xs:enumeration value="VN">
        <!--Vietnam -->
      </xs:enumeration>
      <xs:enumeration value="VU">
        <!--Vanuatu -->
      </xs:enumeration>
      <xs:enumeration value="WF">
        <!--Wallis und Futuna-->
      </xs:enumeration>
      <xs:enumeration value="WS">
        <!--Samoa-->
      </xs:enumeration>
      <xs:enumeration value="XA">
        <!--nicht angeführt-->
      </xs:enumeration>
      <xs:enumeration value="XB">
        <!--Staatenlos-->
      </xs:enumeration>
      <xs:enumeration value="XK">
        <!--Kosovo-->
      </xs:enumeration>
      <xs:enumeration value="YE">
        <!--Jemen-->
      </xs:enumeration>
      <xs:enumeration value="YT">
        <!--Mayotte-->
      </xs:enumeration>
      <xs:enumeration value="ZA">
        <!--Südafrika-->
      </xs:enumeration>
      <xs:enumeration value="ZM">
        <!--Sambia-->
      </xs:enumeration>
      <xs:enumeration value="ZW">
        <!--Simbabwe-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="t_conductor" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml">
    <xs:sequence>
      <xs:element minOccurs="0" name="gender" type="gender_type" />
      <xs:element minOccurs="0" name="title">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="30" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="first_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="middle_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="prefix">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="last_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="birthdate" type="sql_date" />
      <xs:element minOccurs="0" name="birth_place">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="country_of_birth" type="country_type" goaml:supportedIn="5.2" />
      <xs:element minOccurs="0" name="mothers_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="alias">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="full_name_frn" minOccurs="0" goaml:supportedIn="5.2">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="previous_names" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="previous_name" type="previous_name_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="ssn">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="25" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:sequence minOccurs="0" maxOccurs="0">
        <xs:element name="passport_number">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:minLength value="1" />
              <xs:maxLength value="255" />
            </xs:restriction>
          </xs:simpleType>
        </xs:element>
        <xs:element minOccurs="0" name="passport_country" type="country_type" />
      </xs:sequence>
      <xs:element minOccurs="0" name="id_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="nationality1" type="country_type" />
      <xs:element minOccurs="0" name="nationality2" type="country_type" />
      <xs:element minOccurs="0" name="nationality3" type="country_type" />
      <xs:element minOccurs="0" name="residence" type="country_type" />
      <xs:element name="residence_since" type="sql_date" minOccurs="0" goaml:supportedIn="5.2" />
      <xs:element minOccurs="0" name="phones">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element minOccurs="0" name="phone" type="t_phone" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="addresses">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element minOccurs="0" name="address" type="t_address" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="network_devices" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="network_device" type="network_device_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:element name="email" type="email_address" maxOccurs="5">
          <xs:annotation>
            <xs:documentation>The element will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="emails" goaml:supportedIn="5.2">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="email" type="email_address" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:element name="social_media" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="social_account" type="social_account_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="occupation">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:sequence>
          <xs:annotation>
            <xs:documentation>The complex node will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
          <xs:element name="employer_name">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="255" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="employer_address_id" type="t_address" />
          <xs:element minOccurs="0" name="employer_phone_id" type="t_phone" />
        </xs:sequence>
        <xs:element name="employment_history" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="employment" type="employer_type" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element maxOccurs="unbounded" name="identification" type="t_person_identification">
          <xs:annotation>
            <xs:documentation>The complex node will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="identifications" goaml:supportedIn="5.2">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="identification" type="t_person_identification" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:sequence minOccurs="0">
        <xs:element minOccurs="0" fixed="1" name="deceased">
          <xs:simpleType>
            <xs:restriction base="xs:boolean" />
          </xs:simpleType>
        </xs:element>
        <xs:element minOccurs="0" name="date_deceased" type="sql_date" />
      </xs:sequence>
      <xs:element minOccurs="0" name="tax_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="tax_reg_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="source_of_wealth">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="peps" minOccurs="0" goaml:supportedIn="5.2">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="pep" type="pep_details" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="is_protected" type="xs:boolean" minOccurs="0" goaml:supportedIn="5.2" />
      <xs:element name="sanctions" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="sanction_list" type="sanction_list_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="related_persons" minOccurs="0" goaml:supportedIn="5.2">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="person_related_person" type="person_related_person_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="re_relationship" goaml:supportedIn="5.2">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="client_number">
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="255" />
                  <xs:minLength value="1" />
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element name="relationship_date_range" type="relation_date_range_type" />
            <xs:element minOccurs="0" name="comments" type="comments_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="additional_information" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="additional_info" type="generic_additional_info_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="comments" type="comments_type" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="t_account">
    <xs:sequence>
      <xs:element minOccurs="0" name="institution_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="1" />
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:choice>
        <xs:element name="institution_code">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:minLength value="1" />
              <xs:maxLength value="50" />
            </xs:restriction>
          </xs:simpleType>
        </xs:element>
        <xs:element name="swift">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:maxLength value="11" />
              <xs:minLength value="1" />
            </xs:restriction>
          </xs:simpleType>
        </xs:element>
      </xs:choice>
      <xs:element name="institution_country" type="country_type" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element minOccurs="0" name="non_bank_institution" type="xs:boolean" />
      <xs:element name="collection_account" type="xs:boolean" fixed="1" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element minOccurs="0" name="branch">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="account_category" type="account_category_type" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element name="account">
        <xs:annotation>
          <xs:documentation>
        The account length was extended to 255 chars
      </xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="currency_code" type="currency_type" />
      <xs:element name="account_funds" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="account_fund" type="account_fund_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="account_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="iban" type="iban_type" />
      <xs:element minOccurs="0" maxOccurs="0" name="client_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="30" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:element name="personal_account_type" type="account_type">
          <xs:annotation>
            <xs:documentation>The element will be deprecated in Schema 6 and replaced by the new account_type element</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="account_type" type="account_type" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      </xs:choice>
      <xs:element minOccurs="0" name="t_entity" type="t_entity" />
      <xs:element name="related_entities" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="account_related_entity" type="account_related_entity_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:element maxOccurs="unbounded" name="signatory">
          <xs:annotation>
            <xs:documentation>The signatory node will be deprecated in Schema 6 and replaced by the new node related_persons</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element minOccurs="0" fixed="1" name="is_primary">
                <xs:simpleType>
                  <xs:restriction base="xs:boolean" />
                </xs:simpleType>
              </xs:element>
              <xs:element name="t_person" type="t_person" />
              <xs:element minOccurs="0" name="role" type="account_person_role_type" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="related_persons" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="account_related_person" type="account_related_person_type" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:element name="related_accounts" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="account_related_account" type="account_related_account_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="opened" type="sql_date" />
      <xs:element minOccurs="0" name="closed" type="sql_date" />
      <xs:sequence minOccurs="0">
        <xs:element name="balance" type="sql_decimal" minOccurs="1" />
        <xs:element minOccurs="0" name="date_balance" type="sql_date" />
      </xs:sequence>
      <xs:sequence minOccurs="0">
        <xs:element name="status_code" type="account_status_type" />
        <xs:element name="status_date" type="sql_date" minOccurs="0" goaml:supportedIn="5.1" xmlns:goaml="http://www.unodc.org/goaml" />
      </xs:sequence>
      <xs:element minOccurs="0" maxOccurs="0" name="beneficiary">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="50" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="beneficiary_comment">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="network_devices" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="network_device" type="network_device_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="sanctions" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="sanction_list" type="sanction_list_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="additional_information" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="additional_info" type="generic_additional_info_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="comments" type="comments_type" />
    </xs:sequence>
    <xs:assert test="if (iban) then (iban eq account) else true()" xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-ACC01]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;Konto - Bei Angabe eines IBANs muss im Feld 'Kontonummer' der gleiche IBAN angegeben werden&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
    <xs:assert test="if (account_type = 'ATM04') then (matches(account, '^(\d{13,19})$') ) else true()" xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-ACC02]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;Konto - Bei Auswahl 'Kreditkarte' werden 13-19 Ziffern erwartet (ISO/IEC 7812)&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
  </xs:complexType>
  <xs:complexType name="t_person">
    <xs:sequence>
      <xs:element minOccurs="0" name="gender" type="gender_type" />
      <xs:element minOccurs="0" name="title">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="30" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="first_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="middle_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="prefix">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="last_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="birthdate" type="sql_date" />
      <xs:element minOccurs="0" name="birth_place">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="country_of_birth" type="country_type" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element minOccurs="0" name="mothers_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="alias">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="full_name_frn" minOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="previous_names" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="previous_name" type="previous_name_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="ssn">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="25" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:sequence minOccurs="0" maxOccurs="0">
        <xs:element name="passport_number">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:minLength value="1" />
              <xs:maxLength value="255" />
            </xs:restriction>
          </xs:simpleType>
        </xs:element>
        <xs:element minOccurs="0" name="passport_country" type="country_type" />
      </xs:sequence>
      <xs:element minOccurs="0" name="id_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="nationality1" type="country_type" />
      <xs:element minOccurs="0" name="nationality2" type="country_type" />
      <xs:element minOccurs="0" name="nationality3" type="country_type" />
      <xs:element minOccurs="0" name="residence" type="country_type" />
      <xs:element name="residence_since" type="sql_date" minOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element minOccurs="0" name="phones">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element minOccurs="0" name="phone" type="t_phone" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="addresses">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element minOccurs="0" name="address" type="t_address" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="network_devices" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="network_device" type="network_device_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:element name="email" type="email_address" maxOccurs="5">
          <xs:annotation>
            <xs:documentation>The element will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="emails" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="email" type="email_address" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:element name="social_media" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="social_account" type="social_account_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="occupation">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:sequence>
          <xs:annotation>
            <xs:documentation>The complex node will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
          <xs:element name="employer_name">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:maxLength value="255" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="employer_address_id" type="t_address" />
          <xs:element minOccurs="0" name="employer_phone_id" type="t_phone" />
        </xs:sequence>
        <xs:element name="employment_history" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="employment" type="employer_type" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element maxOccurs="unbounded" name="identification" type="t_person_identification">
          <xs:annotation>
            <xs:documentation>The complex node will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="identifications" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="identification" type="t_person_identification" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:sequence minOccurs="0">
        <xs:element minOccurs="0" fixed="1" name="deceased">
          <xs:simpleType>
            <xs:restriction base="xs:boolean" />
          </xs:simpleType>
        </xs:element>
        <xs:element minOccurs="0" name="date_deceased" type="sql_date" />
      </xs:sequence>
      <xs:element minOccurs="0" name="tax_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="tax_reg_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="source_of_wealth">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="peps" minOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="pep" type="pep_details" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="is_protected" type="xs:boolean" minOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml" />
      <xs:element name="sanctions" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="sanction_list" type="sanction_list_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="related_persons" minOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="person_related_person" type="person_related_person_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="re_relationship" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="client_number">
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="255" />
                  <xs:minLength value="1" />
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element name="relationship_date_range" type="relation_date_range_type" />
            <xs:element minOccurs="0" name="comments" type="comments_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="additional_information" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="additional_info" type="generic_additional_info_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="comments" type="comments_type" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="t_entity">
    <xs:sequence>
      <xs:element name="name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="commercial_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="incorporation_legal_form" type="legal_form_type" />
      <xs:element minOccurs="0" name="incorporation_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="50" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="business">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:sequence minOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:element name="entity_status" type="entity_status_type" minOccurs="0" />
        <xs:element name="entity_status_date" type="sql_date" minOccurs="0" />
      </xs:sequence>
      <xs:element minOccurs="0" name="phones">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element minOccurs="0" name="phone" type="t_phone" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="addresses">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element minOccurs="0" name="address" type="t_address" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="network_devices" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="network_device" type="network_device_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:element name="email" type="email_address" maxOccurs="5">
          <xs:annotation>
            <xs:documentation>The element will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="emails" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="email" type="email_address" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:choice minOccurs="0">
        <xs:element name="url">
          <xs:annotation>
            <xs:documentation>The element will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:maxLength value="255" />
            </xs:restriction>
          </xs:simpleType>
        </xs:element>
        <xs:element name="urls" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="url">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="255" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:element minOccurs="0" name="incorporation_state">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="incorporation_country_code" type="country_type" />
      <xs:choice minOccurs="0">
        <xs:element maxOccurs="unbounded" name="director_id">
          <xs:annotation>
            <xs:documentation>The node will be deprecated in Schema 6</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:complexContent mixed="false">
              <xs:extension base="t_person">
                <xs:sequence minOccurs="0">
                  <xs:element name="role" type="entity_person_role_type" />
                </xs:sequence>
              </xs:extension>
            </xs:complexContent>
          </xs:complexType>
        </xs:element>
        <xs:element name="related_persons" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="entity_related_person" type="entity_related_person_type" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:element name="related_entities" minOccurs="0" goaml:supportedIn="5.0" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="entity_related_entity" type="entity_related_entity_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="incorporation_date" type="sql_date" />
      <xs:sequence minOccurs="0">
        <xs:element minOccurs="0" fixed="1" name="business_closed">
          <xs:simpleType>
            <xs:restriction base="xs:boolean" />
          </xs:simpleType>
        </xs:element>
        <xs:element minOccurs="0" name="date_business_closed" type="sql_date" />
      </xs:sequence>
      <xs:element minOccurs="0" name="tax_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="tax_reg_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:minLength value="0" />
            <xs:maxLength value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="entity_identifications" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="entity_identifier" type="t_entity_identification" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="re_relationship" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="client_number">
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:maxLength value="255" />
                  <xs:minLength value="1" />
                </xs:restriction>
              </xs:simpleType>
            </xs:element>
            <xs:element name="relationship_date_range" type="relation_date_range_type" />
            <xs:element minOccurs="0" name="comments" type="comments_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="sanctions" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="sanction_list" type="sanction_list_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="additional_information" minOccurs="0" maxOccurs="0" goaml:supportedIn="5.2" xmlns:goaml="http://www.unodc.org/goaml">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="additional_info" type="generic_additional_info_type" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element minOccurs="0" name="comments" type="comments_type" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="t_trans_item">
    <xs:sequence>
      <xs:element name="item_type" type="trans_item_type" />
      <xs:element minOccurs="0" name="item_make">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="description" type="comments_type" />
      <xs:element minOccurs="0" name="previously_registered_to">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="500" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="presently_registered_to">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="500" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="estimated_value" type="xs:decimal" />
      <xs:element minOccurs="0" name="status_code" type="trans_item_status" />
      <xs:element minOccurs="0" name="status_comments">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="500" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="disposed_value" type="xs:decimal" />
      <xs:element minOccurs="0" name="currency_code" type="currency_type" />
      <xs:element minOccurs="0" name="size" type="xs:decimal" />
      <xs:element minOccurs="0" name="size_uom">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="250" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="address" type="t_address" />
      <xs:element minOccurs="0" name="registration_date" type="sql_date" />
      <xs:element minOccurs="0" name="registration_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="500" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="identification_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="comments" type="comments_type" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="route_type">
    <xs:sequence>
      <xs:element name="reporting_point" type="xs:boolean" />
      <xs:element name="transport_mode" type="transportation_mode_type" />
      <xs:element name="transport_type" type="transportation_type" />
      <xs:element name="carrier_name" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="500" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="carrier_number" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="step_number" type="xs:int" minOccurs="0" />
      <xs:element name="step_code" type="transportation_step_type" minOccurs="0" />
      <xs:element name="step_date" type="sql_date" minOccurs="0" />
      <xs:element name="step_status" type="transportation_step_status_type" minOccurs="0" />
      <xs:element name="place" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="country_code" type="country_type" />
      <xs:element name="comments" type="comments_type" minOccurs="0" />
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="contact_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="PAT01">
        <!--Geschäftlich-->
      </xs:enumeration>
      <xs:enumeration value="PAT02">
        <!--Privat-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="party_role_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="--">
        <!--Sonstiges-->
      </xs:enumeration>
      <xs:enumeration value="PRR01">
        <!--Auftragnehmer-->
      </xs:enumeration>
      <xs:enumeration value="PRR02">
        <!--Begünstigter / Empfänger-->
      </xs:enumeration>
      <xs:enumeration value="PRR03">
        <!--Handelnde Person-->
      </xs:enumeration>
      <xs:enumeration value="PRR04">
        <!--Käufer-->
      </xs:enumeration>
      <xs:enumeration value="PRR05">
        <!--Verkäufer-->
      </xs:enumeration>
      <xs:enumeration value="PRR06">
        <!--Zahlungsberechtigter / Absender-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="network_device_type">
    <xs:sequence>
      <xs:element name="device_number" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="50" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="operating_system" type="operating_system_type" minOccurs="0" />
      <xs:element name="service_provider" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="ip_address" type="ip_address_type" />
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="currency_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="-">
        <!--Unbekannt-->
      </xs:enumeration>
      <xs:enumeration value="--">
        <!--Sonstige-->
      </xs:enumeration>
      <xs:enumeration value="AED">
        <!--VAE Dirham-->
      </xs:enumeration>
      <xs:enumeration value="AFN">
        <!--Afghani-->
      </xs:enumeration>
      <xs:enumeration value="ALL">
        <!--Lek (Albanien)-->
      </xs:enumeration>
      <xs:enumeration value="AMD">
        <!--Dram (Armenien)-->
      </xs:enumeration>
      <xs:enumeration value="ANG">
        <!--Antillen-Gulden-->
      </xs:enumeration>
      <xs:enumeration value="AOA">
        <!--Kwanza (Angola)-->
      </xs:enumeration>
      <xs:enumeration value="ARS">
        <!--Argentinischer Peso-->
      </xs:enumeration>
      <xs:enumeration value="AUD">
        <!--Australischer Dollar-->
      </xs:enumeration>
      <xs:enumeration value="AWG">
        <!--Aruba-Gulden-->
      </xs:enumeration>
      <xs:enumeration value="AZN">
        <!--Aserbaidschan-Manat-->
      </xs:enumeration>
      <xs:enumeration value="BAM">
        <!--Konvertierbare Mark (Bosnien und Herzigowina)-->
      </xs:enumeration>
      <xs:enumeration value="BBD">
        <!--Barbados-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="BDT">
        <!--Taka (Bangladesch)-->
      </xs:enumeration>
      <xs:enumeration value="BGN">
        <!--Lew (Bulgarien)-->
      </xs:enumeration>
      <xs:enumeration value="BHD">
        <!--Bahrain-Dinar-->
      </xs:enumeration>
      <xs:enumeration value="BIF">
        <!--Burundi-Franc-->
      </xs:enumeration>
      <xs:enumeration value="BMD">
        <!--Bermuda-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="BND">
        <!--Brunei-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="BOB">
        <!--Boliviano-->
      </xs:enumeration>
      <xs:enumeration value="BRL">
        <!--Real (Brasilien)-->
      </xs:enumeration>
      <xs:enumeration value="BSD">
        <!--Bahama-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="BTN">
        <!--Ngultrum (Bhutan)-->
      </xs:enumeration>
      <xs:enumeration value="BWP">
        <!--Pula (Botsuana)-->
      </xs:enumeration>
      <xs:enumeration value="BYR">
        <!--Belarussischer Rubel-->
      </xs:enumeration>
      <xs:enumeration value="BZD">
        <!--Belize-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="CAD">
        <!--Kanadischer Dollar-->
      </xs:enumeration>
      <xs:enumeration value="CDF">
        <!--Kongo-Franc-->
      </xs:enumeration>
      <xs:enumeration value="CHE">
        <!--WIR Euro (Komplementärwährung)-->
      </xs:enumeration>
      <xs:enumeration value="CHF">
        <!--Schweizer Franken-->
      </xs:enumeration>
      <xs:enumeration value="CHW">
        <!--WIR Franc (Komplementärwährung)-->
      </xs:enumeration>
      <xs:enumeration value="CLF">
        <!--Unidad de Fomento-->
      </xs:enumeration>
      <xs:enumeration value="CLP">
        <!--Chilenischer Peso-->
      </xs:enumeration>
      <xs:enumeration value="CNY">
        <!--Renminbi Yuan (China)-->
      </xs:enumeration>
      <xs:enumeration value="COP">
        <!--Kolumbianischer Peso-->
      </xs:enumeration>
      <xs:enumeration value="COU">
        <!--Unidad de Valor Real-->
      </xs:enumeration>
      <xs:enumeration value="CRC">
        <!--Costa-Rica Colón-->
      </xs:enumeration>
      <xs:enumeration value="CUC">
        <!--Konvertibler Peso (Kuba)-->
      </xs:enumeration>
      <xs:enumeration value="CUP">
        <!--Kubanischer Peso-->
      </xs:enumeration>
      <xs:enumeration value="CVE">
        <!--Kap-Verde-Escudo-->
      </xs:enumeration>
      <xs:enumeration value="CZK">
        <!--Tschechische Krone-->
      </xs:enumeration>
      <xs:enumeration value="DJF">
        <!--Dschibuti-Franc-->
      </xs:enumeration>
      <xs:enumeration value="DKK">
        <!--Dänische Krone-->
      </xs:enumeration>
      <xs:enumeration value="DOP">
        <!--Dominikanischer Peso-->
      </xs:enumeration>
      <xs:enumeration value="DZD">
        <!--Algerischer Dinar-->
      </xs:enumeration>
      <xs:enumeration value="EGP">
        <!--Ägyptisches Pfund-->
      </xs:enumeration>
      <xs:enumeration value="ERN">
        <!--Nafka (Eritrea)-->
      </xs:enumeration>
      <xs:enumeration value="ETB">
        <!--Birr (Äthiopien)-->
      </xs:enumeration>
      <xs:enumeration value="EUR">
        <!--Euro-->
      </xs:enumeration>
      <xs:enumeration value="FJD">
        <!--Fidschi-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="FKP">
        <!--Falkland-Pfund-->
      </xs:enumeration>
      <xs:enumeration value="GBP">
        <!--Pfund Sterling (Vereinigtes Königreich)-->
      </xs:enumeration>
      <xs:enumeration value="GEL">
        <!--Lari (Georgien)-->
      </xs:enumeration>
      <xs:enumeration value="GGP">
        <!--Guernsey-Pfund-->
      </xs:enumeration>
      <xs:enumeration value="GHS">
        <!--Cedi (Ghana)-->
      </xs:enumeration>
      <xs:enumeration value="GIP">
        <!--Gibraltar-Pfund-->
      </xs:enumeration>
      <xs:enumeration value="GMD">
        <!--Dalasi (Gambia)-->
      </xs:enumeration>
      <xs:enumeration value="GNF">
        <!--Guinea-Franc-->
      </xs:enumeration>
      <xs:enumeration value="GTQ">
        <!--Quetzal (Guatemala)-->
      </xs:enumeration>
      <xs:enumeration value="GYD">
        <!--Guyana-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="HKD">
        <!--Hongkong-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="HNL">
        <!--Lempira (Honduras)-->
      </xs:enumeration>
      <xs:enumeration value="HRK">
        <!--Kuna (Kroatien)-->
      </xs:enumeration>
      <xs:enumeration value="HTG">
        <!--Gourde (Haiti)-->
      </xs:enumeration>
      <xs:enumeration value="HUF">
        <!--Forint (Ungarn)-->
      </xs:enumeration>
      <xs:enumeration value="IDR">
        <!--Rupiah (Indonesien)-->
      </xs:enumeration>
      <xs:enumeration value="ILS">
        <!--Schekel (Israel)-->
      </xs:enumeration>
      <xs:enumeration value="IMP">
        <!--Isle-of-Man-Pfund-->
      </xs:enumeration>
      <xs:enumeration value="INR">
        <!--Indische Rupie-->
      </xs:enumeration>
      <xs:enumeration value="IQD">
        <!--Irak-Dinar-->
      </xs:enumeration>
      <xs:enumeration value="IRR">
        <!--Iranischer Rial-->
      </xs:enumeration>
      <xs:enumeration value="ISK">
        <!--Isländische Krone-->
      </xs:enumeration>
      <xs:enumeration value="JEP">
        <!--Jersey-Pfund-->
      </xs:enumeration>
      <xs:enumeration value="JMD">
        <!--Jamaika-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="JOD">
        <!--Jordan-Dinar (Jordanien)-->
      </xs:enumeration>
      <xs:enumeration value="JPY">
        <!--Yen (Japan)-->
      </xs:enumeration>
      <xs:enumeration value="KES">
        <!--Kenia-Schilling-->
      </xs:enumeration>
      <xs:enumeration value="KGS">
        <!--Som (Kirgisistan)-->
      </xs:enumeration>
      <xs:enumeration value="KHR">
        <!--Riel (Kambodscha)-->
      </xs:enumeration>
      <xs:enumeration value="KMF">
        <!--Komoren-Franc-->
      </xs:enumeration>
      <xs:enumeration value="KPW">
        <!--Won (Nordkorea)-->
      </xs:enumeration>
      <xs:enumeration value="KRW">
        <!--Won (Südkorea)-->
      </xs:enumeration>
      <xs:enumeration value="KWD">
        <!--Kuwait-Dinar-->
      </xs:enumeration>
      <xs:enumeration value="KYD">
        <!--Kaiman-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="KZT">
        <!--Tenge (Kasachstan)-->
      </xs:enumeration>
      <xs:enumeration value="LAK">
        <!--Kip (Laos)-->
      </xs:enumeration>
      <xs:enumeration value="LBP">
        <!--Libanesisches Pfund-->
      </xs:enumeration>
      <xs:enumeration value="LKR">
        <!--Sri-Lanka-Rupie-->
      </xs:enumeration>
      <xs:enumeration value="LRD">
        <!--Liberianischer Dollar-->
      </xs:enumeration>
      <xs:enumeration value="LSL">
        <!--Loti (Lesotho)-->
      </xs:enumeration>
      <xs:enumeration value="LYD">
        <!--Libyscher Dinar-->
      </xs:enumeration>
      <xs:enumeration value="MAD">
        <!--Marokkanischer Dirham-->
      </xs:enumeration>
      <xs:enumeration value="MDL">
        <!--Moldau-Leu-->
      </xs:enumeration>
      <xs:enumeration value="MGA">
        <!--Ariary (Madagaskar)-->
      </xs:enumeration>
      <xs:enumeration value="MKD">
        <!--Denar (Mazedonien)-->
      </xs:enumeration>
      <xs:enumeration value="MMK">
        <!--Kyat (Myanmar/Birma)-->
      </xs:enumeration>
      <xs:enumeration value="MNT">
        <!--Tugrik (Mongolei)-->
      </xs:enumeration>
      <xs:enumeration value="MOP">
        <!--Pataca (Macau)-->
      </xs:enumeration>
      <xs:enumeration value="MRO">
        <!--Ouguiya (Mauretanien)-->
      </xs:enumeration>
      <xs:enumeration value="MUR">
        <!--Mauritius-Rupie-->
      </xs:enumeration>
      <xs:enumeration value="MVR">
        <!--Rufiyaa (Malediven)-->
      </xs:enumeration>
      <xs:enumeration value="MWK">
        <!--Malawi-Kwacha-->
      </xs:enumeration>
      <xs:enumeration value="MXN">
        <!--Mexikanischer Peso-->
      </xs:enumeration>
      <xs:enumeration value="MYR">
        <!--Ringgit (Malaysia)-->
      </xs:enumeration>
      <xs:enumeration value="MZN">
        <!--Metikal (Mosambik)-->
      </xs:enumeration>
      <xs:enumeration value="NAD">
        <!--Namibia-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="NGN">
        <!--Naira (Nigeria)-->
      </xs:enumeration>
      <xs:enumeration value="NIO">
        <!--Córdoba Oro (Nicaragua)-->
      </xs:enumeration>
      <xs:enumeration value="NOK">
        <!--Norwegische Krone-->
      </xs:enumeration>
      <xs:enumeration value="NPR">
        <!--Nepalesische Rupie-->
      </xs:enumeration>
      <xs:enumeration value="NZD">
        <!--Neuseeland-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="OMR">
        <!--Omani-Rial-->
      </xs:enumeration>
      <xs:enumeration value="PAB">
        <!--Balboa (Panama)-->
      </xs:enumeration>
      <xs:enumeration value="PEN">
        <!--Sol (Peru)-->
      </xs:enumeration>
      <xs:enumeration value="PGK">
        <!--Kina (Papua-Neuguinea)-->
      </xs:enumeration>
      <xs:enumeration value="PHP">
        <!--Philippinischer Peso-->
      </xs:enumeration>
      <xs:enumeration value="PKR">
        <!--Pakistanische Rupie-->
      </xs:enumeration>
      <xs:enumeration value="PLN">
        <!--Zloty (Polen)-->
      </xs:enumeration>
      <xs:enumeration value="PYG">
        <!--Guarani (Paraguay)-->
      </xs:enumeration>
      <xs:enumeration value="QAR">
        <!--Katar-Riyal-->
      </xs:enumeration>
      <xs:enumeration value="RON">
        <!--Rumänischer Leu-->
      </xs:enumeration>
      <xs:enumeration value="RSD">
        <!--Serbischer Dinar-->
      </xs:enumeration>
      <xs:enumeration value="RUB">
        <!--Russischer Rubel-->
      </xs:enumeration>
      <xs:enumeration value="RWF">
        <!--Ruanda-Franc-->
      </xs:enumeration>
      <xs:enumeration value="SAR">
        <!--Saudi-Riyal-->
      </xs:enumeration>
      <xs:enumeration value="SBD">
        <!--Salomonen-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="SCR">
        <!--Seychellen-Rupie-->
      </xs:enumeration>
      <xs:enumeration value="SDG">
        <!--Sudanesisches Pfund-->
      </xs:enumeration>
      <xs:enumeration value="SEK">
        <!--Schwedische Krone-->
      </xs:enumeration>
      <xs:enumeration value="SGD">
        <!--Singapur-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="SHP">
        <!--St.-Helena-Pfund-->
      </xs:enumeration>
      <xs:enumeration value="SLL">
        <!--Leone (Sierra Leone)-->
      </xs:enumeration>
      <xs:enumeration value="SOS">
        <!--Somalia-Schilling-->
      </xs:enumeration>
      <xs:enumeration value="SRD">
        <!--Suriname-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="SSP">
        <!--Südsudanesisches Pfund-->
      </xs:enumeration>
      <xs:enumeration value="STD">
        <!--Dobra (Sao Tome und Principe)-->
      </xs:enumeration>
      <xs:enumeration value="SYP">
        <!--Syrisches Pfund-->
      </xs:enumeration>
      <xs:enumeration value="SZL">
        <!--Lilangeni (Swasiland)-->
      </xs:enumeration>
      <xs:enumeration value="THB">
        <!--Baht (Thailand)-->
      </xs:enumeration>
      <xs:enumeration value="TJS">
        <!--Somoni (Tadschikistan)-->
      </xs:enumeration>
      <xs:enumeration value="TMT">
        <!--Turkmenistan-Manat-->
      </xs:enumeration>
      <xs:enumeration value="TND">
        <!--Tunesischer Dinar-->
      </xs:enumeration>
      <xs:enumeration value="TOP">
        <!--Pa'anga-->
      </xs:enumeration>
      <xs:enumeration value="TRY">
        <!--Türkische Lira-->
      </xs:enumeration>
      <xs:enumeration value="TTD">
        <!--Trinidad-und-Tobago-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="TWD">
        <!--Neuer Taiwan-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="TZS">
        <!--Tansania-Schilling-->
      </xs:enumeration>
      <xs:enumeration value="UAH">
        <!--Hrywnja (Ukraine)-->
      </xs:enumeration>
      <xs:enumeration value="UGX">
        <!--Uganda-Schilling-->
      </xs:enumeration>
      <xs:enumeration value="USD">
        <!--US-Dollar-->
      </xs:enumeration>
      <xs:enumeration value="UYU">
        <!--Uruguayischer Peso-->
      </xs:enumeration>
      <xs:enumeration value="UZS">
        <!--Sum (Usbekistan)-->
      </xs:enumeration>
      <xs:enumeration value="VEF">
        <!--Bolivar (Venezuela)-->
      </xs:enumeration>
      <xs:enumeration value="VND">
        <!--Dong (Vietnam)-->
      </xs:enumeration>
      <xs:enumeration value="VUV">
        <!--Vatu (Vanuatu)-->
      </xs:enumeration>
      <xs:enumeration value="WST">
        <!--Tala (Samoa)-->
      </xs:enumeration>
      <xs:enumeration value="XAB">
        <!--Bitcoin ABC-->
      </xs:enumeration>
      <xs:enumeration value="XAF">
        <!--CFA-Franc (BEAC)-->
      </xs:enumeration>
      <xs:enumeration value="XAG">
        <!--Silber (Feinunze)-->
      </xs:enumeration>
      <xs:enumeration value="XAU">
        <!--Gold (Feinunze)-->
      </xs:enumeration>
      <xs:enumeration value="XBS">
        <!--Bitcoin SV-->
      </xs:enumeration>
      <xs:enumeration value="XBT">
        <!--Bitcoin-->
      </xs:enumeration>
      <xs:enumeration value="XCD">
        <!--Ostkaribischer Dollar-->
      </xs:enumeration>
      <xs:enumeration value="XDH">
        <!--Dash-->
      </xs:enumeration>
      <xs:enumeration value="XEC">
        <!--Ethereum Classic-->
      </xs:enumeration>
      <xs:enumeration value="XES">
        <!--EOS-->
      </xs:enumeration>
      <xs:enumeration value="XET">
        <!--Ethereum-->
      </xs:enumeration>
      <xs:enumeration value="XIT">
        <!--IOTA-->
      </xs:enumeration>
      <xs:enumeration value="XLM">
        <!--Stellar Lumen-->
      </xs:enumeration>
      <xs:enumeration value="XLN">
        <!--Litecoin-->
      </xs:enumeration>
      <xs:enumeration value="XMR">
        <!--Monero-->
      </xs:enumeration>
      <xs:enumeration value="XNO">
        <!--NEO-->
      </xs:enumeration>
      <xs:enumeration value="XOF">
        <!--CFA-Franc (BCEAO)-->
      </xs:enumeration>
      <xs:enumeration value="XOM">
        <!--TetherUSD (Omni)-->
      </xs:enumeration>
      <xs:enumeration value="XOX">
        <!--0x-->
      </xs:enumeration>
      <xs:enumeration value="XPD">
        <!--Palladium (Feinunze)-->
      </xs:enumeration>
      <xs:enumeration value="XPF">
        <!--CFP-Franc-->
      </xs:enumeration>
      <xs:enumeration value="XPT">
        <!--Platin (Feinunze)-->
      </xs:enumeration>
      <xs:enumeration value="XRP">
        <!--Ripple-->
      </xs:enumeration>
      <xs:enumeration value="XSA">
        <!--Santiment-->
      </xs:enumeration>
      <xs:enumeration value="XTC">
        <!--Bitcoin Cash-->
      </xs:enumeration>
      <xs:enumeration value="XTG">
        <!--Bitcoin Gold-->
      </xs:enumeration>
      <xs:enumeration value="XTP">
        <!--ETP-->
      </xs:enumeration>
      <xs:enumeration value="XZC">
        <!--Zcash-->
      </xs:enumeration>
      <xs:enumeration value="YER">
        <!--Jemen-Rial-->
      </xs:enumeration>
      <xs:enumeration value="ZAR">
        <!--Rand (Südafrika, Namibia)-->
      </xs:enumeration>
      <xs:enumeration value="ZMW">
        <!--Sambischer Kwacha-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="gender_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="D">
        <!--divers-->
      </xs:enumeration>
      <xs:enumeration value="F">
        <!--weiblich-->
      </xs:enumeration>
      <xs:enumeration value="I">
        <!--inter-->
      </xs:enumeration>
      <xs:enumeration value="K">
        <!--keine Angabe-->
      </xs:enumeration>
      <xs:enumeration value="M">
        <!--männlich-->
      </xs:enumeration>
      <xs:enumeration value="O">
        <!--offen-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="previous_name_type">
    <xs:sequence>
      <xs:element name="first_name" minOccurs="1">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="last_name" minOccurs="1">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="100" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="comments" type="comments_type" minOccurs="0" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="t_phone">
    <xs:sequence>
      <xs:element name="tph_contact_type" type="contact_type" />
      <xs:element name="tph_communication_type" type="communication_type" />
      <xs:element minOccurs="0" name="tph_country_prefix">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:pattern value="^(\+?\d{1,3}|0?\d{1,3})$" />
            <xs:maxLength value="4" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="tph_number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:pattern value="^(\d{1,50})$" />
            <xs:maxLength value="50" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="0" name="tph_extension">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="10" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="comments" type="comments_type" />
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="email_address">
    <xs:restriction base="xs:string">
      <xs:maxLength value="255" />
      <xs:pattern value="[_a-zA-Z0-9-+]+(\.[_a-zA-Z0-9-\+]+)*@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*(\.[a-zA-Z]{2,10})" />
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="social_account_type">
    <xs:sequence>
      <xs:element name="platform" type="xs:string" />
      <xs:element name="user_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="comments" type="comments_type" minOccurs="0" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="employer_type">
    <xs:sequence>
      <xs:element name="employer_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="employer_business" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="employer_identifier" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="employer_addresses" minOccurs="0">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="address" type="t_address" minOccurs="0" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="employer_phones" minOccurs="0">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded">
            <xs:element name="phone" type="t_phone" minOccurs="0" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="employment_period" type="relation_date_range_type" minOccurs="0" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="t_person_identification">
    <xs:sequence>
      <xs:element name="type" type="identifier_type" />
      <xs:element name="number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element minOccurs="0" name="issue_date" type="sql_date" />
      <xs:element minOccurs="0" name="expiry_date" type="sql_date" />
      <xs:element minOccurs="0" name="issued_by">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="issue_country" type="country_type" />
      <xs:element minOccurs="0" name="comments" type="comments_type" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="pep_details">
    <xs:sequence>
      <xs:element name="pep_country" type="country_type" />
      <xs:element name="function_name" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="function_description" type="comments_type" minOccurs="0" />
      <xs:element name="pep_date_range" type="relation_date_range_type" minOccurs="0" maxOccurs="0" />
      <xs:element name="comments" type="comments_type" minOccurs="0" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="sanction_list_type">
    <xs:sequence>
      <xs:element name="provider">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="sanction_list_name">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="match_criteria" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="comments_type" />
        </xs:simpleType>
      </xs:element>
      <xs:element name="link_to_source" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="sanction_list_attributes" type="comments_type" minOccurs="0" />
      <xs:element name="sanction_list_date_range" type="relation_date_range_type" minOccurs="0" />
      <xs:element name="comments" type="comments_type" minOccurs="0" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="person_related_person_type">
    <xs:sequence>
      <xs:element name="person_person_relation" type="person_person_relation_type" minOccurs="0" />
      <xs:element name="person" type="t_person" />
      <xs:element name="relation_date_range" type="relation_date_range_type" minOccurs="0" maxOccurs="0" />
      <xs:element name="comments" type="comments_type" minOccurs="0" />
    </xs:sequence>
    <xs:assert test=" if (person_person_relation = '--' ) then (string-length(comments) &gt;= 5) else true()" xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-PER01]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;Person zu Person Beziehung - Auswahl 'Sonstiges' erfordert Begründung in Feld 'Kommentar' (&gt;= 5 Zeichen)&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
  </xs:complexType>
  <xs:complexType name="relation_date_range_type">
    <xs:sequence>
      <xs:sequence>
        <xs:element name="valid_from" type="sql_date" />
        <xs:element name="is_approx_from_date" type="xs:boolean" fixed="1" minOccurs="0" />
      </xs:sequence>
      <xs:sequence minOccurs="0">
        <xs:element name="valid_to" type="sql_date" />
        <xs:element name="is_approx_to_date" type="xs:boolean" fixed="1" minOccurs="0" />
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="generic_additional_info_type">
    <xs:sequence>
      <xs:element name="info_type" type="additional_info_type" minOccurs="0" />
      <xs:element name="info_subject">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="info_text" type="comments_type" minOccurs="0" />
      <xs:element name="info_numeric" type="xs:decimal" minOccurs="0" />
      <xs:element name="info_date" type="sql_date" minOccurs="0" />
      <xs:element name="info_boolean" type="xs:boolean" minOccurs="0" />
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="account_category_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ACCNT">
        <!--Account-->
      </xs:enumeration>
      <xs:enumeration value="IBAN">
        <!--IBAN-->
      </xs:enumeration>
      <xs:enumeration value="PYMCC">
        <!--Payment Card-->
      </xs:enumeration>
      <xs:enumeration value="VADDR">
        <!--Virtual Address-->
      </xs:enumeration>
      <xs:enumeration value="VWALT">
        <!--Virtual Wallet-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="account_fund_type">
    <xs:sequence>
      <xs:element name="currency_code" type="currency_type" />
      <xs:element name="currency_balance" type="sql_decimal" minOccurs="0" />
      <xs:element name="currency_balance_date" type="sql_date" minOccurs="0" />
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="iban_type">
    <xs:restriction base="xs:string">
      <xs:maxLength value="34" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="account_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="--">
        <!--Sonstiges-->
      </xs:enumeration>
      <xs:enumeration value="ATM01">
        <!--Geschäftskonto-->
      </xs:enumeration>
      <xs:enumeration value="ATM02">
        <!--Girokonto-->
      </xs:enumeration>
      <xs:enumeration value="ATM03">
        <!--Korrespondenzkonto-->
      </xs:enumeration>
      <xs:enumeration value="ATM04">
        <!--Kreditkarte-->
      </xs:enumeration>
      <xs:enumeration value="ATM05">
        <!--Kreditkonto-->
      </xs:enumeration>
      <xs:enumeration value="ATM07">
        <!--Sparkonto-->
      </xs:enumeration>
      <xs:enumeration value="ATM08">
        <!--Treuhandkonto-->
      </xs:enumeration>
      <xs:enumeration value="ATM09">
        <!--Sammelkonto-->
      </xs:enumeration>
      <xs:enumeration value="ATM10">
        <!--Wallet-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="account_related_entity_type">
    <xs:sequence>
      <xs:element name="account_entity_relation" type="account_entity_relation_type" />
      <xs:element name="entity" type="t_entity" />
      <xs:element name="relation_date_range" type="relation_date_range_type" minOccurs="0" maxOccurs="0" />
      <xs:element name="comments" type="comments_type" minOccurs="0" />
    </xs:sequence>
    <xs:assert test=" if (account_entity_relation = '--') then (string-length(comments) &gt;= 5) else true()" xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-ACR03]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;Konto zu Organisation Beziehung - Auswahl 'Sonstiges' erfordert Begründung in Feld 'Kommentar' (&gt;= 5 Zeichen)&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
  </xs:complexType>
  <xs:simpleType name="account_person_role_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="--">
        <!--Sonstiges-->
      </xs:enumeration>
      <xs:enumeration value="APR01">
        <!--Kontoinhaber-->
      </xs:enumeration>
      <xs:enumeration value="APR02">
        <!--Verfügungsberechtigter-->
      </xs:enumeration>
      <xs:enumeration value="APR03">
        <!--Wirtschaftlich Berechtigter-->
      </xs:enumeration>
      <xs:enumeration value="APR04">
        <!--Zeichnungsberechtigter-->
      </xs:enumeration>
      <xs:enumeration value="APR05">
        <!--Gesetzlicher Vertreter-->
      </xs:enumeration>
      <xs:enumeration value="APR06">
        <!--Kontoinhaber & Zeichnungsberechtigter-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="account_related_person_my_client_type">
    <xs:sequence>
      <xs:element name="is_primary" fixed="1" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:boolean" />
        </xs:simpleType>
      </xs:element>
      <xs:element name="t_person" type="t_person_my_client" />
      <xs:element name="role" type="account_person_role_type" />
      <xs:element name="relation_date_range" type="relation_date_range_type" minOccurs="0" maxOccurs="0" />
      <xs:element name="comments" type="comments_type" minOccurs="0" />
    </xs:sequence>
    <xs:assert test=" if (role = '--') then (string-length(comments) &gt;= 5) else true() " xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-ACR02]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;Konto zu Person Beziehung-Mein Kunde - Auswahl 'Sonstiges' bei Rolle erfordert Begründung in Feld 'Kommentar' (&gt;= 5 Zeichen)&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
  </xs:complexType>
  <xs:complexType name="account_related_account_type">
    <xs:sequence>
      <xs:element name="account_account_relation" type="account_account_relation_type" />
      <xs:element name="account" type="t_account" />
      <xs:element name="relation_date_range" type="relation_date_range_type" minOccurs="0" maxOccurs="0" />
      <xs:element name="comments" type="comments_type" minOccurs="0" />
    </xs:sequence>
    <xs:assert test=" if (account_account_relation = 'AAR02') then (string-length(comments) &gt;= 5) else true()" xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-ACR01]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;Konto zu Konto Beziehung - Referenzkonto erfordert Begründung (&gt;= 5 Zeichen) in Kommentarfeld des angegebenen Referenzkontos&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
  </xs:complexType>
  <xs:simpleType name="account_status_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ACS01">
        <!--Aktiv-->
      </xs:enumeration>
      <xs:enumeration value="ACS02">
        <!--Gepfändet-->
      </xs:enumeration>
      <xs:enumeration value="ACS03">
        <!--Geschlossen-->
      </xs:enumeration>
      <xs:enumeration value="ACS04">
        <!--Gesperrt-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="legal_form_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="--">
        <!--Sonstiges-->
      </xs:enumeration>
      <xs:enumeration value="ELF01">
        <!--Ausländische Rechtsform-->
      </xs:enumeration>
      <xs:enumeration value="ELF02">
        <!--Kapitalgesellschaft-->
      </xs:enumeration>
      <xs:enumeration value="ELF03">
        <!--Personengesellschaft-->
      </xs:enumeration>
      <xs:enumeration value="ELF04">
        <!--Stiftung-->
      </xs:enumeration>
      <xs:enumeration value="ELF05">
        <!--Verein-->
      </xs:enumeration>
      <xs:enumeration value="ELF06">
        <!--Einzelunternehmen-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="entity_status_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ES01">
        <!--Aktiv-->
      </xs:enumeration>
      <xs:enumeration value="ES02">
        <!--Aufgelöst-->
      </xs:enumeration>
      <xs:enumeration value="ES03">
        <!--Inaktiv-->
      </xs:enumeration>
      <xs:enumeration value="ES04">
        <!--In Auflösung-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="entity_person_role_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="EPR03">
        <!--Vertretungsberechtigte(r)-->
      </xs:enumeration>
      <xs:enumeration value="EPR04">
        <!--Sonstiger Bezug-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="entity_related_person_type">
    <xs:sequence>
      <xs:element name="person" type="t_person" />
      <xs:element name="role" type="entity_person_role_type" />
      <xs:element name="relation_date_range" type="relation_date_range_type" minOccurs="0" maxOccurs="0" />
      <xs:element name="share_percentage" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:decimal">
            <xs:minInclusive value="0" />
            <xs:maxInclusive value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="voting_percentage" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:decimal">
            <xs:minInclusive value="0" />
            <xs:maxInclusive value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="comments" type="comments_type" minOccurs="0" />
    </xs:sequence>
    <xs:assert test=" if (role = 'EPR04') then (string-length(comments) &gt;= 5) else true() " xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-ENR01]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;Organisation zu Person Beziehung - Auswahl 'Sonstiger Bezug' erfordert Begründung in Feld 'Kommentar' (&gt;= 5 Zeichen)&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
  </xs:complexType>
  <xs:complexType name="entity_related_entity_type">
    <xs:sequence>
      <xs:element name="entity_entity_relation" type="entity_entity_relation_type" />
      <xs:element name="entity" type="t_entity" />
      <xs:element name="relation_date_range" type="relation_date_range_type" minOccurs="0" maxOccurs="0" />
      <xs:element name="share_percentage" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:decimal">
            <xs:minInclusive value="0" />
            <xs:maxInclusive value="100" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="comments" type="comments_type" minOccurs="0" />
    </xs:sequence>
    <xs:assert test=" if (entity_entity_relation = '--') then (string-length(comments) &gt;= 5) else true() " xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-ENR02]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;Organisation zu Organisation Beziehung - Auswahl 'Sonstiges' erfordert Begründung in Feld 'Kommentar' (&gt;= 5 Zeichen)&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
  </xs:complexType>
  <xs:complexType name="t_entity_identification">
    <xs:sequence>
      <xs:element name="type" type="entity_identifier_type" />
      <xs:element name="number">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="issue_date" type="sql_date" minOccurs="0" />
      <xs:element name="expiry_date" type="sql_date" minOccurs="0" />
      <xs:element name="issued_by" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="issue_country" type="country_type" />
      <xs:element name="comments" type="comments_type" minOccurs="0" />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="account_related_person_type">
    <xs:sequence>
      <xs:element name="is_primary" fixed="1" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:boolean" />
        </xs:simpleType>
      </xs:element>
      <xs:element name="t_person" type="t_person" />
      <xs:element name="role" type="account_person_role_type" minOccurs="0" />
      <xs:element name="relation_date_range" type="relation_date_range_type" minOccurs="0" maxOccurs="0" />
      <xs:element name="comments" type="comments_type" minOccurs="0" />
    </xs:sequence>
    <xs:assert test=" if (role = '--') then (string-length(comments) &gt;= 5) else true()" xerces:message="&lt;br/&gt;&lt;b&gt;[REJ-ACR02]&lt;/b&gt;&lt;br/&gt;&lt;i&gt;Konto zu Person Beziehung - Auswahl 'Sonstiges' bei Rolle erfordert Begründung in Feld 'Kommentar' (&gt;= 5 Zeichen)&lt;/i&gt;" xmlns:xerces="http://xerces.apache.org" />
  </xs:complexType>
  <xs:simpleType name="trans_item_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="--">
        <!--Sonstiges-->
      </xs:enumeration>
      <xs:enumeration value="TIT01">
        <!--Edelmetall-->
      </xs:enumeration>
      <xs:enumeration value="TIT02">
        <!--Edelsteine-->
      </xs:enumeration>
      <xs:enumeration value="TIT03">
        <!--Geschäftsobjekt-->
      </xs:enumeration>
      <xs:enumeration value="TIT04">
        <!--Grundstück-->
      </xs:enumeration>
      <xs:enumeration value="TIT05">
        <!--Jetons / Spielmarken-->
      </xs:enumeration>
      <xs:enumeration value="TIT06">
        <!--Kraftfahrzeug-->
      </xs:enumeration>
      <xs:enumeration value="TIT07">
        <!--Kunst / Antiquitäten-->
      </xs:enumeration>
      <xs:enumeration value="TIT08">
        <!--Luftfahrzeug-->
      </xs:enumeration>
      <xs:enumeration value="TIT09">
        <!--Schiff / Motorboot-->
      </xs:enumeration>
      <xs:enumeration value="TIT10">
        <!--Schmuck / Uhren-->
      </xs:enumeration>
      <xs:enumeration value="TIT11">
        <!--Versicherung-->
      </xs:enumeration>
      <xs:enumeration value="TIT12">
        <!--Virtuelle Währung-->
      </xs:enumeration>
      <xs:enumeration value="TIT13">
        <!--Wohnobjekt-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="trans_item_status">
    <xs:restriction base="xs:string">
      <xs:enumeration value="--">
        <!--Sonstiges-->
      </xs:enumeration>
      <xs:enumeration value="PSM01">
        <!--Gekauft-->
      </xs:enumeration>
      <xs:enumeration value="PSM02">
        <!--Verkauft-->
      </xs:enumeration>
      <xs:enumeration value="PSM03">
        <!--Geliehen-->
      </xs:enumeration>
      <xs:enumeration value="PSM04">
        <!--Verliehen-->
      </xs:enumeration>
      <xs:enumeration value="PSM05">
        <!--Umgetauscht-->
      </xs:enumeration>
      <xs:enumeration value="PSM06">
        <!--Gespendet-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="transportation_mode_type">
    <xs:restriction base="xs:string">
      <!-- Air, Marine, Road, Train,...-->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="transportation_type">
    <xs:restriction base="xs:string">
      <!-- Vessel, Yacht, Commercial Airplance, Private Jet, Car, Bus, ... -->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="transportation_step_type">
    <xs:restriction base="xs:string">
      <!-- Leaving, Arriving, Transit,...-->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="transportation_step_status_type">
    <xs:restriction base="xs:string">
      <!-- Carried, Denyed, Cancelled,...-->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="operating_system_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="-">
        <!--Unknown-->
      </xs:enumeration>
      <xs:enumeration value="Android">
        <!--Android-->
      </xs:enumeration>
      <xs:enumeration value="Chrome OS">
        <!--Chrome OS-->
      </xs:enumeration>
      <xs:enumeration value="iOS">
        <!--iOS-->
      </xs:enumeration>
      <xs:enumeration value="Linux">
        <!--Linux-->
      </xs:enumeration>
      <xs:enumeration value="MacOS">
        <!--MacOS-->
      </xs:enumeration>
      <xs:enumeration value="Other">
        <!--Other-->
      </xs:enumeration>
      <xs:enumeration value="Ubuntu">
        <!--Ubuntu-->
      </xs:enumeration>
      <xs:enumeration value="Windows">
        <!--Windows-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="ip_address_type">
    <xs:sequence>
      <xs:choice>
        <xs:element name="ipv6" type="ipv6_address_type" />
        <xs:sequence>
          <xs:element name="ipv4" type="ipv4_address_type" />
          <xs:element name="cgn_port" minOccurs="0">
            <xs:simpleType>
              <xs:restriction base="xs:int">
                <xs:maxInclusive value="65535" />
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element name="ipv6" type="ipv6_address_type" minOccurs="0" />
        </xs:sequence>
      </xs:choice>
      <xs:element name="nat" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="15" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="first_seen_date" type="sql_date" minOccurs="0" />
      <xs:element name="last_seen_date" type="sql_date" minOccurs="0" />
      <xs:element name="using_proxy" type="xs:boolean" fixed="1" minOccurs="0" />
      <xs:element name="city" minOccurs="0">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:maxLength value="255" />
            <xs:minLength value="1" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="country" type="country_type" minOccurs="0" />
      <xs:element name="comments" type="comments_type" minOccurs="0" />
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="communication_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="COM01">
        <!--Telefon-->
      </xs:enumeration>
      <xs:enumeration value="COM04">
        <!--Fax-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="identifier_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="--">
        <!--Sonstiges Legitimationsdokument-->
      </xs:enumeration>
      <xs:enumeration value="ITM01">
        <!--Führerschein-->
      </xs:enumeration>
      <xs:enumeration value="ITM03">
        <!--Personalausweis-->
      </xs:enumeration>
      <xs:enumeration value="ITM04">
        <!--Reisepass-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="person_person_relation_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="--">
        <!--Sonstiges-->
      </xs:enumeration>
      <xs:enumeration value="PPR01">
        <!--Begleitperson-->
      </xs:enumeration>
      <xs:enumeration value="PPR02">
        <!--Gesetzl. VertreterIn-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="additional_info_type">
    <xs:restriction base="xs:string" />
  </xs:simpleType>
  <xs:simpleType name="account_entity_relation_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="--">
        <!--Sonstiges-->
      </xs:enumeration>
      <xs:enumeration value="AER01">
        <!--Nichtdeklarierung einer Treuhandbeziehung-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="account_account_relation_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="AAR01">
        <!--Virtueller IBAN-->
      </xs:enumeration>
      <xs:enumeration value="AAR02">
        <!--Referenzkonto-->
      </xs:enumeration>
      <xs:enumeration value="AAR03">
        <!--Kreditkarte-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="entity_entity_relation_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="--">
        <!--Sonstiges-->
      </xs:enumeration>
      <xs:enumeration value="EER01">
        <!--Eigentumsverhältnis-->
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="entity_identifier_type">
    <xs:restriction base="xs:string" />
  </xs:simpleType>
  <xs:simpleType name="ipv6_address_type">
    <xs:restriction base="xs:string">
      <xs:maxLength value="45" />
      <xs:pattern value="([A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}" />
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ipv4_address_type">
    <xs:restriction base="xs:string">
      <xs:maxLength value="15" />
      <xs:pattern value="((1?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.){3}(1?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])" />
    </xs:restriction>
  </xs:simpleType>
</xs:schema>